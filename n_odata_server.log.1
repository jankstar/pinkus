[2016-10-30 18:03:25.937] [ERROR] console - Nicht verarbeiteter Fehler für Anforderung GET /odata: Error: Cannot GET /odata
    at raiseUrlNotFoundError (/Users/jan/nodejs/pinkus/node_modules/loopback/server/middleware/url-not-found.js:20:17)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/serve-static/index.js:121:7)
    at emitOne (events.js:96:13)
    at SendStream.emit (events.js:188:7)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/send/index.js:275:17)
    at SendStream.onStatError (/Users/jan/nodejs/pinkus/node_modules/send/index.js:392:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/send/index.js:683:16)
    at onstat (/Users/jan/nodejs/pinkus/node_modules/send/index.js:672:14)
    at FSReqWrap.oncomplete (fs.js:111:15)
[2016-10-30 18:05:36.623] [INFO] odata - processing OData V2 request of type GET
[2016-10-30 18:05:36.625] [DEBUG] odata - baseUrl = /odata
[2016-10-30 18:05:54.014] [INFO] odata - processing OData V2 request of type GET
[2016-10-30 18:05:54.014] [DEBUG] odata - baseUrl = /odata//$metadata
[2016-10-30 18:06:00.924] [INFO] odata - processing OData V2 request of type GET
[2016-10-30 18:06:00.924] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-10-30 18:06:00.926] [TRACE] metadata - entering buildMetadata
[2016-10-30 18:06:00.941] [TRACE] metadata - metadata xml build
[2016-10-30 19:08:03.690] [INFO] odata - processing OData V2 request of type GET
[2016-10-30 19:08:03.692] [DEBUG] odata - baseUrl = /odata/User
[2016-10-30 19:08:08.879] [INFO] odata - processing OData V2 request of type GET
[2016-10-30 19:08:08.879] [DEBUG] odata - baseUrl = /odata/User
[2016-10-30 19:17:16.638] [INFO] odata - processing OData V2 request of type GET
[2016-10-30 19:17:16.640] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-10-30 19:17:16.644] [TRACE] metadata - entering buildMetadata
[2016-10-30 19:17:16.662] [TRACE] metadata - metadata xml build
[2016-10-30 19:17:42.005] [INFO] odata - processing OData V2 request of type GET
[2016-10-30 19:17:42.005] [DEBUG] odata - baseUrl = /odata/Kunde
[2016-10-30 19:17:45.827] [INFO] odata - processing OData V2 request of type GET
[2016-10-30 19:17:45.828] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-10-30 19:17:45.833] [INFO] console - filter: {"limit":1000}
[2016-10-30 19:17:57.463] [INFO] odata - processing OData V2 request of type GET
[2016-10-30 19:17:57.464] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-10-30 19:17:57.465] [TRACE] metadata - entering buildMetadata
[2016-10-30 19:17:57.472] [TRACE] metadata - metadata xml build
[2016-11-04 20:11:07.757] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 20:11:07.759] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 20:11:07.763] [TRACE] metadata - entering buildMetadata
[2016-11-04 20:11:07.777] [TRACE] metadata - metadata xml build
[2016-11-04 20:11:26.802] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 20:11:26.802] [DEBUG] odata - baseUrl = /odata/User
[2016-11-04 20:12:38.183] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 20:12:38.211] [DEBUG] odata - baseUrl = /odata/Kunde
[2016-11-04 20:12:46.311] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 20:12:46.311] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 20:12:46.313] [TRACE] metadata - entering buildMetadata
[2016-11-04 20:12:46.327] [TRACE] metadata - metadata xml build
[2016-11-04 20:13:02.570] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 20:13:02.571] [DEBUG] odata - baseUrl = /odata/Kunde
[2016-11-04 20:14:59.567] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 20:14:59.575] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 20:14:59.584] [INFO] console - filter: {"limit":1000}
[2016-11-04 20:15:08.526] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 20:15:08.526] [DEBUG] odata - baseUrl = /odata/Test
[2016-11-04 20:15:08.527] [ERROR] console - Something went wrong with retrieving requestModelClass for request Test
[2016-11-04 20:15:14.455] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 20:15:14.456] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 20:15:14.457] [INFO] console - filter: {"limit":1000}
[2016-11-04 20:15:20.597] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 20:15:20.598] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 20:15:20.598] [TRACE] metadata - entering buildMetadata
[2016-11-04 20:15:20.604] [TRACE] metadata - metadata xml build
[2016-11-04 20:18:19.603] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 20:18:19.603] [DEBUG] odata - baseUrl = /odata
[2016-11-04 20:30:15.387] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 20:30:15.388] [DEBUG] odata - baseUrl = /odata
[2016-11-04 20:30:19.420] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 20:30:19.420] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 20:30:19.441] [INFO] console - filter: {"limit":1000}
[2016-11-04 20:36:51.414] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 20:36:51.415] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 20:36:51.418] [INFO] console - filter: {"limit":1000}
[2016-11-04 21:15:23.852] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 21:15:23.853] [DEBUG] odata - baseUrl = /odata/Kunden(1)
[2016-11-04 21:15:30.709] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 21:15:30.710] [DEBUG] odata - baseUrl = /odata/Kunden(%221%22)
[2016-11-04 21:15:30.711] [ERROR] console - entity data for request /odata/Kunden(%221%22) was not found
[2016-11-04 21:15:30.712] [ERROR] console - An error occured:  404
[2016-11-04 21:15:36.805] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 21:15:36.805] [DEBUG] odata - baseUrl = /odata/Kunden(1)
[2016-11-04 21:16:28.646] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 21:16:28.648] [DEBUG] odata - baseUrl = /odata/Kunden(1)
[2016-11-04 21:16:31.548] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 21:16:31.548] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 21:16:31.550] [INFO] console - filter: {"limit":1000}
[2016-11-04 21:37:54.285] [ERROR] console - Verbindungsfehler: MongoError: could not authenticate
Nach der nächsten Anforderung findet ein Neuversuch statt.
[2016-11-04 21:48:24.369] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 21:48:24.373] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 21:48:24.396] [INFO] console - filter: {"limit":1000}
[2016-11-04 21:48:55.576] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 21:48:55.611] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 21:48:55.615] [INFO] console - filter: {"limit":1000}
[2016-11-04 21:57:04.884] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 21:57:04.887] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 21:57:05.128] [INFO] console - filter: {"limit":1000}
[2016-11-04 21:57:25.719] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 21:57:25.719] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 21:57:25.724] [INFO] console - filter: {"limit":1000}
[2016-11-04 22:08:22.993] [INFO] console - DB Init - User: 
 [ { name: 'admin',
    password: '$2a$10$1UPf8ROEIH8i/MSPPo9j1e3YP6UxwOp/rDjMwWOoM2ikGWoBFLA9m',
    email: 'admin@lokalhost.de',
    id: 581cf8c625c28d9f7eddb6b3 } ]
[2016-11-04 22:15:15.357] [INFO] console - Current hour is 22
[2016-11-04 22:21:49.594] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 22:21:49.595] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 22:21:49.609] [INFO] console - filter: {"limit":1000}
[2016-11-04 22:24:21.724] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 22:24:21.726] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 22:24:21.730] [TRACE] metadata - entering buildMetadata
[2016-11-04 22:24:21.744] [TRACE] metadata - metadata xml build
[2016-11-04 22:24:27.705] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 22:24:27.706] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 22:24:27.734] [INFO] console - filter: {"limit":1000}
[2016-11-04 22:26:42.053] [ERROR] console - Nicht verarbeiteter Fehler für Anforderung GET /rocky/odata/$metadata: Error: Cannot GET /rocky/odata/$metadata
    at raiseUrlNotFoundError (/Users/jan/nodejs/pinkus/node_modules/loopback/server/middleware/url-not-found.js:20:17)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/serve-static/index.js:121:7)
    at emitOne (events.js:96:13)
    at SendStream.emit (events.js:188:7)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/send/index.js:275:17)
    at SendStream.onStatError (/Users/jan/nodejs/pinkus/node_modules/send/index.js:392:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/send/index.js:683:16)
    at onstat (/Users/jan/nodejs/pinkus/node_modules/send/index.js:672:14)
    at FSReqWrap.oncomplete (fs.js:111:15)
[2016-11-04 22:26:42.077] [ERROR] console - Nicht verarbeiteter Fehler für Anforderung GET /rocky/odata/$metadata: Error: Cannot GET /rocky/odata/$metadata
    at raiseUrlNotFoundError (/Users/jan/nodejs/pinkus/node_modules/loopback/server/middleware/url-not-found.js:20:17)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/serve-static/index.js:121:7)
    at emitOne (events.js:96:13)
    at SendStream.emit (events.js:188:7)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/send/index.js:275:17)
    at SendStream.onStatError (/Users/jan/nodejs/pinkus/node_modules/send/index.js:392:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/send/index.js:683:16)
    at onstat (/Users/jan/nodejs/pinkus/node_modules/send/index.js:672:14)
    at FSReqWrap.oncomplete (fs.js:111:15)
[2016-11-04 22:27:02.719] [ERROR] console - Nicht verarbeiteter Fehler für Anforderung POST /rocky-web/promos-hwk/sap/bc/srt/rfc/PROREX/LIFP_GET_ORD_LIST?sap-client=300: Error: Cannot POST /rocky-web/promos-hwk/sap/bc/srt/rfc/PROREX/LIFP_GET_ORD_LIST?sap-client=300
    at raiseUrlNotFoundError (/Users/jan/nodejs/pinkus/node_modules/loopback/server/middleware/url-not-found.js:20:17)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at serveStatic (/Users/jan/nodejs/pinkus/node_modules/serve-static/index.js:75:16)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at nosniff (/Users/jan/nodejs/pinkus/node_modules/dont-sniff-mimetype/index.js:4:5)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
[2016-11-04 22:27:02.722] [ERROR] console - Nicht verarbeiteter Fehler für Anforderung POST /rocky-web/promos-hwk/sap/bc/srt/rfc/PROREX/LIFP_GET_CON_LIST?sap-client=300: Error: Cannot POST /rocky-web/promos-hwk/sap/bc/srt/rfc/PROREX/LIFP_GET_CON_LIST?sap-client=300
    at raiseUrlNotFoundError (/Users/jan/nodejs/pinkus/node_modules/loopback/server/middleware/url-not-found.js:20:17)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at serveStatic (/Users/jan/nodejs/pinkus/node_modules/serve-static/index.js:75:16)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at nosniff (/Users/jan/nodejs/pinkus/node_modules/dont-sniff-mimetype/index.js:4:5)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
[2016-11-04 22:36:41.029] [ERROR] console - Nicht verarbeiteter Fehler für Anforderung GET /rocky-web/cxf-utils.js: Error: Cannot GET /rocky-web/cxf-utils.js
    at raiseUrlNotFoundError (/Users/jan/nodejs/pinkus/node_modules/loopback/server/middleware/url-not-found.js:20:17)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/serve-static/index.js:121:7)
    at emitOne (events.js:96:13)
    at SendStream.emit (events.js:188:7)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/send/index.js:275:17)
    at SendStream.onStatError (/Users/jan/nodejs/pinkus/node_modules/send/index.js:392:12)
    at onstat (/Users/jan/nodejs/pinkus/node_modules/send/index.js:674:26)
    at FSReqWrap.oncomplete (fs.js:111:15)
[2016-11-04 22:36:42.166] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 22:36:42.166] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 22:36:42.167] [TRACE] metadata - entering buildMetadata
[2016-11-04 22:36:42.176] [TRACE] metadata - metadata xml build
[2016-11-04 22:37:35.998] [ERROR] console - Nicht verarbeiteter Fehler für Anforderung GET /rocky-web/cxf-utils.js: Error: Cannot GET /rocky-web/cxf-utils.js
    at raiseUrlNotFoundError (/Users/jan/nodejs/pinkus/node_modules/loopback/server/middleware/url-not-found.js:20:17)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/serve-static/index.js:121:7)
    at emitOne (events.js:96:13)
    at SendStream.emit (events.js:188:7)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/send/index.js:275:17)
    at SendStream.onStatError (/Users/jan/nodejs/pinkus/node_modules/send/index.js:392:12)
    at onstat (/Users/jan/nodejs/pinkus/node_modules/send/index.js:674:26)
    at FSReqWrap.oncomplete (fs.js:111:15)
[2016-11-04 22:37:37.104] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 22:37:37.105] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 22:37:37.108] [TRACE] metadata - entering buildMetadata
[2016-11-04 22:37:37.122] [TRACE] metadata - metadata xml build
[2016-11-04 22:39:50.067] [ERROR] console - Nicht verarbeiteter Fehler für Anforderung GET /pinkus/cxf-utils.js: Error: Cannot GET /pinkus/cxf-utils.js
    at raiseUrlNotFoundError (/Users/jan/nodejs/pinkus/node_modules/loopback/server/middleware/url-not-found.js:20:17)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/serve-static/index.js:121:7)
    at emitOne (events.js:96:13)
    at SendStream.emit (events.js:188:7)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/send/index.js:275:17)
    at SendStream.onStatError (/Users/jan/nodejs/pinkus/node_modules/send/index.js:392:12)
    at onstat (/Users/jan/nodejs/pinkus/node_modules/send/index.js:674:26)
    at FSReqWrap.oncomplete (fs.js:111:15)
[2016-11-04 22:39:50.080] [ERROR] console - Nicht verarbeiteter Fehler für Anforderung GET /PROREX/LIFP_GET_ORD_LISTService.js: Error: Cannot GET /PROREX/LIFP_GET_ORD_LISTService.js
    at raiseUrlNotFoundError (/Users/jan/nodejs/pinkus/node_modules/loopback/server/middleware/url-not-found.js:20:17)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/serve-static/index.js:121:7)
    at emitOne (events.js:96:13)
    at SendStream.emit (events.js:188:7)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/send/index.js:275:17)
    at SendStream.onStatError (/Users/jan/nodejs/pinkus/node_modules/send/index.js:392:12)
    at onstat (/Users/jan/nodejs/pinkus/node_modules/send/index.js:674:26)
    at FSReqWrap.oncomplete (fs.js:111:15)
[2016-11-04 22:39:50.084] [ERROR] console - Nicht verarbeiteter Fehler für Anforderung GET /PROREX/LIFP_GET_CON_LISTService.js: Error: Cannot GET /PROREX/LIFP_GET_CON_LISTService.js
    at raiseUrlNotFoundError (/Users/jan/nodejs/pinkus/node_modules/loopback/server/middleware/url-not-found.js:20:17)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/serve-static/index.js:121:7)
    at emitOne (events.js:96:13)
    at SendStream.emit (events.js:188:7)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/send/index.js:275:17)
    at SendStream.onStatError (/Users/jan/nodejs/pinkus/node_modules/send/index.js:392:12)
    at onstat (/Users/jan/nodejs/pinkus/node_modules/send/index.js:674:26)
    at FSReqWrap.oncomplete (fs.js:111:15)
[2016-11-04 22:39:51.180] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 22:39:51.180] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 22:39:51.181] [TRACE] metadata - entering buildMetadata
[2016-11-04 22:39:51.188] [TRACE] metadata - metadata xml build
[2016-11-04 22:40:04.560] [ERROR] console - Nicht verarbeiteter Fehler für Anforderung GET /pinkus/cxf-utils.js: Error: Cannot GET /pinkus/cxf-utils.js
    at raiseUrlNotFoundError (/Users/jan/nodejs/pinkus/node_modules/loopback/server/middleware/url-not-found.js:20:17)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/serve-static/index.js:121:7)
    at emitOne (events.js:96:13)
    at SendStream.emit (events.js:188:7)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/send/index.js:275:17)
    at SendStream.onStatError (/Users/jan/nodejs/pinkus/node_modules/send/index.js:392:12)
    at onstat (/Users/jan/nodejs/pinkus/node_modules/send/index.js:674:26)
    at FSReqWrap.oncomplete (fs.js:111:15)
[2016-11-04 22:40:04.592] [ERROR] console - Nicht verarbeiteter Fehler für Anforderung GET /PROREX/LIFP_GET_ORD_LISTService.js: Error: Cannot GET /PROREX/LIFP_GET_ORD_LISTService.js
    at raiseUrlNotFoundError (/Users/jan/nodejs/pinkus/node_modules/loopback/server/middleware/url-not-found.js:20:17)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/serve-static/index.js:121:7)
    at emitOne (events.js:96:13)
    at SendStream.emit (events.js:188:7)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/send/index.js:275:17)
    at SendStream.onStatError (/Users/jan/nodejs/pinkus/node_modules/send/index.js:392:12)
    at onstat (/Users/jan/nodejs/pinkus/node_modules/send/index.js:674:26)
    at FSReqWrap.oncomplete (fs.js:111:15)
[2016-11-04 22:40:04.613] [ERROR] console - Nicht verarbeiteter Fehler für Anforderung GET /PROREX/LIFP_GET_CON_LISTService.js: Error: Cannot GET /PROREX/LIFP_GET_CON_LISTService.js
    at raiseUrlNotFoundError (/Users/jan/nodejs/pinkus/node_modules/loopback/server/middleware/url-not-found.js:20:17)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/serve-static/index.js:121:7)
    at emitOne (events.js:96:13)
    at SendStream.emit (events.js:188:7)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/send/index.js:275:17)
    at SendStream.onStatError (/Users/jan/nodejs/pinkus/node_modules/send/index.js:392:12)
    at onstat (/Users/jan/nodejs/pinkus/node_modules/send/index.js:674:26)
    at FSReqWrap.oncomplete (fs.js:111:15)
[2016-11-04 22:40:05.526] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 22:40:05.526] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 22:40:05.529] [TRACE] metadata - entering buildMetadata
[2016-11-04 22:40:05.548] [TRACE] metadata - metadata xml build
[2016-11-04 22:40:40.014] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 22:40:40.015] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 22:40:40.015] [TRACE] metadata - entering buildMetadata
[2016-11-04 22:40:40.026] [TRACE] metadata - metadata xml build
[2016-11-04 22:40:52.588] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 22:40:52.590] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 22:40:52.594] [TRACE] metadata - entering buildMetadata
[2016-11-04 22:40:52.608] [TRACE] metadata - metadata xml build
[2016-11-04 22:47:15.840] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 22:47:15.840] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 22:47:15.841] [TRACE] metadata - entering buildMetadata
[2016-11-04 22:47:15.851] [TRACE] metadata - metadata xml build
[2016-11-04 22:49:31.277] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 22:49:31.277] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 22:49:31.278] [TRACE] metadata - entering buildMetadata
[2016-11-04 22:49:31.283] [TRACE] metadata - metadata xml build
[2016-11-04 22:54:38.343] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 22:54:38.344] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 22:54:38.344] [TRACE] metadata - entering buildMetadata
[2016-11-04 22:54:38.352] [TRACE] metadata - metadata xml build
[2016-11-04 22:56:08.188] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 22:56:08.188] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 22:56:08.188] [TRACE] metadata - entering buildMetadata
[2016-11-04 22:56:08.192] [TRACE] metadata - metadata xml build
[2016-11-04 22:56:08.476] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 22:56:08.476] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-11-04 22:56:08.522] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 22:56:08.523] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 22:56:08.529] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-11-04 22:56:40.242] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 22:56:40.242] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-11-04 22:56:40.256] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 22:56:40.257] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 22:56:40.260] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-11-04 22:56:45.101] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 22:56:45.102] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 22:56:45.104] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-11-04 22:57:52.479] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 22:57:52.479] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 22:57:52.482] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-11-04 23:03:25.021] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:03:25.021] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 23:03:25.021] [TRACE] metadata - entering buildMetadata
[2016-11-04 23:03:25.026] [TRACE] metadata - metadata xml build
[2016-11-04 23:03:25.328] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:03:25.328] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-11-04 23:03:25.343] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:03:25.344] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 23:03:25.348] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-11-04 23:03:50.432] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:03:50.432] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 23:03:50.434] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-11-04 23:04:54.359] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:04:54.359] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 23:04:54.359] [TRACE] metadata - entering buildMetadata
[2016-11-04 23:04:54.363] [TRACE] metadata - metadata xml build
[2016-11-04 23:04:54.672] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:04:54.672] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-11-04 23:04:54.697] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:04:54.697] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 23:04:54.703] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-11-04 23:13:25.750] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:13:25.752] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 23:13:25.753] [TRACE] metadata - entering buildMetadata
[2016-11-04 23:13:25.757] [TRACE] metadata - metadata xml build
[2016-11-04 23:13:26.019] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:13:26.020] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-11-04 23:13:26.042] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:13:26.042] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 23:13:26.044] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-11-04 23:13:35.615] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:13:35.616] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 23:13:35.618] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-11-04 23:18:04.619] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:18:04.619] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 23:18:04.619] [TRACE] metadata - entering buildMetadata
[2016-11-04 23:18:04.622] [TRACE] metadata - metadata xml build
[2016-11-04 23:18:04.893] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:18:04.893] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-11-04 23:18:04.912] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:18:04.912] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 23:18:04.914] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-11-04 23:19:03.023] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:19:03.023] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 23:19:03.025] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-11-04 23:19:08.065] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:19:08.065] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 23:19:08.068] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-11-04 23:19:45.503] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:19:45.503] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 23:19:45.503] [TRACE] metadata - entering buildMetadata
[2016-11-04 23:19:45.505] [TRACE] metadata - metadata xml build
[2016-11-04 23:19:45.823] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:19:45.823] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-11-04 23:19:45.844] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:19:45.844] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 23:19:45.846] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-11-04 23:21:23.264] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:21:23.265] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 23:21:23.268] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-11-04 23:22:57.555] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:22:57.557] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 23:22:57.560] [TRACE] metadata - entering buildMetadata
[2016-11-04 23:22:57.585] [TRACE] metadata - metadata xml build
[2016-11-04 23:22:57.993] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:22:57.993] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-11-04 23:22:58.055] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:22:58.059] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 23:22:58.088] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-11-04 23:27:35.132] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:27:35.132] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 23:27:35.133] [TRACE] metadata - entering buildMetadata
[2016-11-04 23:27:35.145] [TRACE] metadata - metadata xml build
[2016-11-04 23:27:35.438] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:27:35.438] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-11-04 23:27:35.463] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:27:35.463] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 23:27:35.472] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-11-04 23:42:19.752] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:42:19.753] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-04 23:42:19.754] [TRACE] metadata - entering buildMetadata
[2016-11-04 23:42:19.759] [TRACE] metadata - metadata xml build
[2016-11-04 23:42:20.057] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:42:20.058] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-11-04 23:42:20.102] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:42:20.102] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 23:42:20.129] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-11-04 23:42:33.701] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:42:33.701] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-11-04 23:42:36.445] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:42:36.445] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-11-04 23:42:36.465] [INFO] odata - processing OData V2 request of type GET
[2016-11-04 23:42:36.465] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-04 23:42:36.469] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-11-06 11:09:22.856] [INFO] odata - processing OData V2 request of type GET
[2016-11-06 11:09:22.858] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-06 11:09:22.861] [TRACE] metadata - entering buildMetadata
[2016-11-06 11:09:22.879] [TRACE] metadata - metadata xml build
[2016-11-06 11:09:23.260] [INFO] odata - processing OData V2 request of type GET
[2016-11-06 11:09:23.260] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-11-06 11:09:23.361] [INFO] odata - processing OData V2 request of type GET
[2016-11-06 11:09:23.362] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-06 11:09:23.369] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-11-06 16:36:20.035] [INFO] console - Web server listening at: http://0.0.0.0:3001
[2016-11-06 16:36:20.037] [INFO] console - Browse your REST API at http://0.0.0.0:3001/explorer
[2016-11-06 16:37:09.922] [INFO] odata - processing OData V2 request of type GET
[2016-11-06 16:37:09.922] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-06 16:37:09.926] [TRACE] metadata - entering buildMetadata
[2016-11-06 16:37:09.943] [TRACE] metadata - metadata xml build
[2016-11-06 16:37:10.347] [INFO] odata - processing OData V2 request of type GET
[2016-11-06 16:37:10.347] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-11-06 16:37:10.422] [INFO] odata - processing OData V2 request of type GET
[2016-11-06 16:37:10.422] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-06 16:37:10.430] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-11-13 14:24:56.277] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 14:24:56.279] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-13 14:24:56.283] [TRACE] metadata - entering buildMetadata
[2016-11-13 14:24:56.296] [ERROR] console - (node:15038) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Missing attribute value for attribute Type of element Property
[2016-11-13 14:24:56.296] [ERROR] console - (node:15038) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
[2016-11-13 14:26:56.285] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 14:26:56.286] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-13 14:26:56.287] [TRACE] metadata - entering buildMetadata
[2016-11-13 14:26:56.294] [ERROR] console - (node:15038) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: Missing attribute value for attribute Type of element Property
[2016-11-13 14:33:02.028] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 14:33:02.030] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-13 14:33:02.034] [TRACE] metadata - entering buildMetadata
[2016-11-13 14:33:02.048] [ERROR] console - (node:15367) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Missing attribute value for attribute Type of element Property
[2016-11-13 14:33:02.049] [ERROR] console - (node:15367) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
[2016-11-13 14:33:39.276] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 14:33:39.277] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-13 14:33:39.279] [TRACE] metadata - entering buildMetadata
[2016-11-13 14:33:39.286] [ERROR] console - (node:15367) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: Missing attribute value for attribute Type of element Property
[2016-11-13 14:34:49.977] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 14:34:49.978] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-13 14:34:50.012] [INFO] console - filter: {"limit":1000}
[2016-11-13 14:34:50.284] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 14:34:50.285] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-13 14:34:50.292] [INFO] console - filter: {"limit":1000}
[2016-11-13 14:35:02.034] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 14:35:02.034] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-13 14:35:02.034] [TRACE] metadata - entering buildMetadata
[2016-11-13 14:35:02.042] [ERROR] console - (node:15367) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 3): Error: Missing attribute value for attribute Type of element Property
[2016-11-13 14:35:50.498] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 14:35:50.500] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-13 14:35:50.532] [INFO] console - filter: {"limit":1000}
[2016-11-13 14:35:50.774] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 14:35:50.775] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-13 14:35:50.779] [INFO] console - filter: {"limit":1000}
[2016-11-13 14:36:04.890] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 14:36:04.891] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-13 14:36:04.892] [TRACE] metadata - entering buildMetadata
[2016-11-13 14:36:04.905] [ERROR] console - (node:15461) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Missing attribute value for attribute Type of element Property
[2016-11-13 14:36:04.906] [ERROR] console - (node:15461) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
[2016-11-13 14:38:04.895] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 14:38:04.895] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-13 14:38:04.896] [TRACE] metadata - entering buildMetadata
[2016-11-13 14:38:04.902] [ERROR] console - (node:15461) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: Missing attribute value for attribute Type of element Property
[2016-11-13 14:40:05.031] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 14:40:05.032] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-13 14:40:05.032] [TRACE] metadata - entering buildMetadata
[2016-11-13 14:40:05.037] [ERROR] console - (node:15461) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 3): Error: Missing attribute value for attribute Type of element Property
[2016-11-13 14:42:05.037] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 14:42:05.038] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-13 14:42:05.038] [TRACE] metadata - entering buildMetadata
[2016-11-13 14:42:05.041] [ERROR] console - (node:15461) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 4): Error: Missing attribute value for attribute Type of element Property
[2016-11-13 14:42:18.868] [ERROR] console - Nicht verarbeiteter Fehler für Anforderung GET /odata: Error: Cannot GET /odata
    at raiseUrlNotFoundError (/Users/jan/nodejs/pinkus/node_modules/loopback/server/middleware/url-not-found.js:20:17)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/serve-static/index.js:121:7)
    at emitOne (events.js:96:13)
    at SendStream.emit (events.js:188:7)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/send/index.js:275:17)
    at SendStream.onStatError (/Users/jan/nodejs/pinkus/node_modules/send/index.js:392:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/send/index.js:683:16)
    at onstat (/Users/jan/nodejs/pinkus/node_modules/send/index.js:672:14)
    at FSReqWrap.oncomplete (fs.js:111:15)
[2016-11-13 14:42:19.115] [ERROR] console - Nicht verarbeiteter Fehler für Anforderung GET /odata: Error: Cannot GET /odata
    at raiseUrlNotFoundError (/Users/jan/nodejs/pinkus/node_modules/loopback/server/middleware/url-not-found.js:20:17)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/serve-static/index.js:121:7)
    at emitOne (events.js:96:13)
    at SendStream.emit (events.js:188:7)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/send/index.js:275:17)
    at SendStream.onStatError (/Users/jan/nodejs/pinkus/node_modules/send/index.js:392:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/send/index.js:683:16)
    at onstat (/Users/jan/nodejs/pinkus/node_modules/send/index.js:672:14)
    at FSReqWrap.oncomplete (fs.js:111:15)
[2016-11-13 14:44:20.756] [ERROR] console - Nicht verarbeiteter Fehler für Anforderung GET /explorer/Kunde: Error: Cannot GET /explorer/Kunde
    at raiseUrlNotFoundError (/Users/jan/nodejs/pinkus/node_modules/loopback/server/middleware/url-not-found.js:20:17)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/serve-static/index.js:121:7)
    at emitOne (events.js:96:13)
    at SendStream.emit (events.js:188:7)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/send/index.js:275:17)
    at SendStream.onStatError (/Users/jan/nodejs/pinkus/node_modules/send/index.js:392:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/send/index.js:683:16)
    at onstat (/Users/jan/nodejs/pinkus/node_modules/send/index.js:672:14)
    at FSReqWrap.oncomplete (fs.js:111:15)
[2016-11-13 14:44:20.974] [ERROR] console - Nicht verarbeiteter Fehler für Anforderung GET /explorer/Kunde: Error: Cannot GET /explorer/Kunde
    at raiseUrlNotFoundError (/Users/jan/nodejs/pinkus/node_modules/loopback/server/middleware/url-not-found.js:20:17)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/serve-static/index.js:121:7)
    at emitOne (events.js:96:13)
    at SendStream.emit (events.js:188:7)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/send/index.js:275:17)
    at SendStream.onStatError (/Users/jan/nodejs/pinkus/node_modules/send/index.js:392:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/send/index.js:683:16)
    at onstat (/Users/jan/nodejs/pinkus/node_modules/send/index.js:672:14)
    at FSReqWrap.oncomplete (fs.js:111:15)
[2016-11-13 14:50:27.830] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 14:50:27.832] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-13 14:50:27.835] [TRACE] metadata - entering buildMetadata
[2016-11-13 14:50:27.849] [ERROR] console - (node:15900) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Missing attribute value for attribute Type of element Property
[2016-11-13 14:50:27.849] [ERROR] console - (node:15900) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
[2016-11-13 14:52:32.835] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 14:52:32.837] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-13 14:52:32.871] [INFO] console - filter: {"limit":1000}
[2016-11-13 14:52:47.759] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 14:52:47.759] [DEBUG] odata - baseUrl = /odata/Dozenten
[2016-11-13 14:59:17.493] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 14:59:17.493] [DEBUG] odata - baseUrl = /odata/Dozenten
[2016-11-13 14:59:39.256] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 14:59:39.258] [DEBUG] odata - baseUrl = /odata/Dozenten
[2016-11-13 14:59:45.620] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 14:59:45.621] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-13 14:59:45.629] [INFO] console - filter: {"limit":1000}
[2016-11-13 15:00:00.443] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 15:00:00.443] [DEBUG] odata - baseUrl = /odata/Dozent
[2016-11-13 15:00:04.611] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 15:00:04.612] [DEBUG] odata - baseUrl = /odata/Dozenten
[2016-11-13 15:00:27.059] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 15:00:27.092] [DEBUG] odata - baseUrl = /odata/Teilnehmer
[2016-11-13 15:00:32.435] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 15:00:32.436] [DEBUG] odata - baseUrl = /odata/Teilnehmers
[2016-11-13 15:00:39.979] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 15:00:39.980] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-13 15:00:39.985] [INFO] console - filter: {"limit":1000}
[2016-11-13 15:00:49.170] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 15:00:49.171] [DEBUG] odata - baseUrl = /odata/Kunden('1')
[2016-11-13 15:00:49.177] [ERROR] console - entity data for request /odata/Kunden('1') was not found
[2016-11-13 15:00:49.178] [ERROR] console - An error occured:  404
[2016-11-13 15:00:55.660] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 15:00:55.660] [DEBUG] odata - baseUrl = /odata/Kunden(1))
[2016-11-13 15:00:55.667] [ERROR] console - entity data for request /odata/Kunden(1)) was not found
[2016-11-13 15:00:55.667] [ERROR] console - An error occured:  404
[2016-11-13 15:00:58.594] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 15:00:58.594] [DEBUG] odata - baseUrl = /odata/Kunden(1)
[2016-11-13 15:00:58.598] [ERROR] console - entity data for request /odata/Kunden(1) was not found
[2016-11-13 15:00:58.599] [ERROR] console - An error occured:  404
[2016-11-13 15:01:04.117] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 15:01:04.117] [DEBUG] odata - baseUrl = /odata/Kunden(%221%22)
[2016-11-13 15:01:04.121] [ERROR] console - entity data for request /odata/Kunden(%221%22) was not found
[2016-11-13 15:01:04.122] [ERROR] console - An error occured:  404
[2016-11-13 15:01:08.240] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 15:01:08.241] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-13 15:01:08.244] [INFO] console - filter: {"limit":1000}
[2016-11-13 15:01:30.193] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 15:01:30.193] [DEBUG] odata - baseUrl = /odata/Kunden('1')
[2016-11-13 15:01:30.198] [ERROR] console - entity data for request /odata/Kunden('1') was not found
[2016-11-13 15:01:30.199] [ERROR] console - An error occured:  404
[2016-11-13 15:01:35.376] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 15:01:35.377] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-13 15:01:35.380] [INFO] console - filter: {"limit":1000}
[2016-11-13 15:02:31.758] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 15:02:31.760] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-13 15:02:31.794] [INFO] console - filter: {"limit":1000}
[2016-11-13 15:02:35.863] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 15:02:35.864] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-13 15:02:35.865] [TRACE] metadata - entering buildMetadata
[2016-11-13 15:02:35.875] [ERROR] console - (node:16290) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Missing attribute value for attribute Type of element Property
[2016-11-13 15:02:35.876] [ERROR] console - (node:16290) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
[2016-11-13 15:02:54.326] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 15:02:54.326] [DEBUG] odata - baseUrl = /odata/Dozenten
[2016-11-13 15:03:22.996] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 15:03:22.997] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-13 15:03:22.998] [TRACE] metadata - entering buildMetadata
[2016-11-13 15:03:23.006] [ERROR] console - (node:16290) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: Missing attribute value for attribute Type of element Property
[2016-11-13 15:05:50.039] [ERROR] console - Validierungsfehler in updateOrCreate() werden ignoriert:
[2016-11-13 15:05:50.043] [ERROR] console -   Die Instanz `User` ist nicht gültig. Details: `password` can't be blank (value: undefined).
[2016-11-13 17:57:19.036] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 17:57:19.038] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-13 17:57:19.043] [TRACE] metadata - entering buildMetadata
[2016-11-13 17:57:19.057] [ERROR] console - (node:21595) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Missing attribute value for attribute Type of element Property
[2016-11-13 17:57:19.058] [ERROR] console - (node:21595) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
[2016-11-13 17:58:13.029] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 17:58:13.034] [DEBUG] odata - baseUrl = /odata/Dozenten
[2016-11-13 17:58:28.826] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 17:58:28.826] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-13 17:58:28.834] [INFO] console - filter: {"limit":1000}
[2016-11-13 17:58:45.542] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 17:58:45.543] [DEBUG] odata - baseUrl = /odata
[2016-11-13 17:58:54.862] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 17:58:54.863] [DEBUG] odata - baseUrl = /odata/Users
[2016-11-13 18:04:09.615] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 18:04:09.617] [DEBUG] odata - baseUrl = /odata/Users
[2016-11-13 18:04:11.869] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 18:04:11.869] [DEBUG] odata - baseUrl = /odata/Users
[2016-11-13 18:04:17.862] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 18:04:17.862] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-13 18:04:17.864] [TRACE] metadata - entering buildMetadata
[2016-11-13 18:04:17.877] [ERROR] console - (node:21827) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Missing attribute value for attribute Type of element Property
[2016-11-13 18:04:17.878] [ERROR] console - (node:21827) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
[2016-11-13 18:04:59.111] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 18:04:59.113] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-11-13 18:04:59.152] [INFO] console - filter: {"limit":1000}
[2016-11-13 18:05:05.793] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 18:05:05.793] [DEBUG] odata - baseUrl = /odata/Dozenten
[2016-11-13 18:05:05.797] [INFO] console - filter: {"limit":1000}
[2016-11-13 18:05:19.598] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 18:05:19.598] [DEBUG] odata - baseUrl = /odata/Teilnehmer
[2016-11-13 18:05:19.601] [INFO] console - filter: {"limit":1000}
[2016-11-13 18:05:26.581] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 18:05:26.582] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-13 18:05:26.583] [TRACE] metadata - entering buildMetadata
[2016-11-13 18:05:26.596] [ERROR] console - (node:21858) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Missing attribute value for attribute Type of element Property
[2016-11-13 18:05:26.596] [ERROR] console - (node:21858) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
[2016-11-13 18:17:21.561] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 18:17:21.563] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-13 18:17:21.567] [TRACE] metadata - entering buildMetadata
[2016-11-13 18:17:21.579] [ERROR] console - (node:22143) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Missing attribute value for attribute Type of element Property
[2016-11-13 18:17:21.579] [ERROR] console - (node:22143) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
[2016-11-13 18:17:26.643] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 18:17:26.643] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-13 18:17:26.644] [TRACE] metadata - entering buildMetadata
[2016-11-13 18:17:26.651] [ERROR] console - (node:22143) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: Missing attribute value for attribute Type of element Property
[2016-11-13 18:18:42.824] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 18:18:42.824] [DEBUG] odata - baseUrl = /odata
[2016-11-13 18:18:49.686] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 18:18:49.686] [DEBUG] odata - baseUrl = /odata/Users
[2016-11-13 18:43:21.553] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 18:43:21.553] [DEBUG] odata - baseUrl = /odata/Teilnehmer
[2016-11-13 18:43:21.559] [INFO] console - filter: {"limit":1000}
[2016-11-13 18:43:27.344] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 18:43:27.344] [DEBUG] odata - baseUrl = /odata/Teilnehmer
[2016-11-13 18:43:27.347] [INFO] console - filter: {"limit":1000}
[2016-11-13 18:43:29.885] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 18:43:29.886] [DEBUG] odata - baseUrl = /odata/Teilnehmer
[2016-11-13 18:43:29.890] [INFO] console - filter: {"limit":1000}
[2016-11-13 18:43:55.984] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 18:43:55.985] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-13 18:43:55.985] [TRACE] metadata - entering buildMetadata
[2016-11-13 18:43:55.989] [ERROR] console - (node:22143) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 3): Error: Missing attribute value for attribute Type of element Property
[2016-11-13 18:45:55.985] [INFO] odata - processing OData V2 request of type GET
[2016-11-13 18:45:55.985] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-13 18:45:55.986] [TRACE] metadata - entering buildMetadata
[2016-11-13 18:45:55.993] [ERROR] console - (node:22143) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 4): Error: Missing attribute value for attribute Type of element Property
[2016-11-19 09:18:58.224] [INFO] odata - processing OData V2 request of type GET
[2016-11-19 09:18:58.291] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-11-19 09:18:58.292] [TRACE] metadata - entering buildMetadata
[2016-11-19 09:18:58.354] [ERROR] console - (node:22143) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 5): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 22:45:17.925] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:45:17.927] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 22:45:17.932] [TRACE] metadata - entering buildMetadata
[2016-12-03 22:45:17.951] [ERROR] console - (node:58118) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 22:45:17.954] [ERROR] console - (node:58118) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
[2016-12-03 22:47:17.937] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:47:17.938] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 22:47:17.938] [TRACE] metadata - entering buildMetadata
[2016-12-03 22:47:17.946] [ERROR] console - (node:58118) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 22:49:17.943] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:49:17.944] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 22:49:17.944] [TRACE] metadata - entering buildMetadata
[2016-12-03 22:49:17.950] [ERROR] console - (node:58118) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 3): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 22:51:32.365] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:51:32.365] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 22:51:32.366] [TRACE] metadata - entering buildMetadata
[2016-12-03 22:51:32.370] [ERROR] console - (node:58118) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 4): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 22:51:34.102] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:51:34.104] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-12-03 22:51:34.114] [INFO] console - filter: {"limit":1000}
[2016-12-03 22:53:10.107] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:53:10.107] [DEBUG] odata - baseUrl = /odata/Users
[2016-12-03 22:53:22.993] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:53:22.993] [DEBUG] odata - baseUrl = /odata/Standort
[2016-12-03 22:53:26.752] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:53:26.752] [DEBUG] odata - baseUrl = /odata/Standorte
[2016-12-03 22:53:26.755] [INFO] console - filter: {"limit":1000}
[2016-12-03 22:53:37.946] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:53:37.946] [DEBUG] odata - baseUrl = /odata/Raum
[2016-12-03 22:53:43.186] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:53:43.187] [DEBUG] odata - baseUrl = /odata/R%C3%A4ume
[2016-12-03 22:53:43.261] [INFO] console - filter: {"limit":1000}
[2016-12-03 22:53:53.057] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:53:53.058] [DEBUG] odata - baseUrl = /odata/Schulungen
[2016-12-03 22:53:53.061] [INFO] console - filter: {"limit":1000}
[2016-12-03 22:54:03.297] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:54:03.297] [DEBUG] odata - baseUrl = /odata/Kursinhalte
[2016-12-03 22:54:03.301] [INFO] console - filter: {"limit":1000}
[2016-12-03 22:54:13.219] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:54:13.220] [DEBUG] odata - baseUrl = /odata/Dozenten
[2016-12-03 22:54:13.224] [INFO] console - filter: {"limit":1000}
[2016-12-03 22:54:22.576] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:54:22.577] [DEBUG] odata - baseUrl = /odata/Teilnehmer
[2016-12-03 22:54:22.589] [INFO] console - filter: {"limit":1000}
[2016-12-03 22:54:32.182] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:54:32.182] [DEBUG] odata - baseUrl = /odata/Teilnehmergruppen
[2016-12-03 22:54:32.183] [ERROR] console - Something went wrong with retrieving requestModelClass for request Teilnehmergruppen
[2016-12-03 22:54:37.008] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:54:37.008] [DEBUG] odata - baseUrl = /odata/Teilnehmergruppe
[2016-12-03 22:54:37.014] [INFO] console - filter: {"limit":1000}
[2016-12-03 22:54:51.054] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:54:51.054] [DEBUG] odata - baseUrl = /odata/Kurs
[2016-12-03 22:54:54.368] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:54:54.368] [DEBUG] odata - baseUrl = /odata/Kurse
[2016-12-03 22:54:54.372] [INFO] console - filter: {"limit":1000}
[2016-12-03 22:55:04.079] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:55:04.079] [DEBUG] odata - baseUrl = /odata/Kurstermine
[2016-12-03 22:55:04.090] [INFO] console - filter: {"limit":1000}
[2016-12-03 22:55:49.672] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:55:49.672] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 22:55:49.672] [TRACE] metadata - entering buildMetadata
[2016-12-03 22:55:49.677] [ERROR] console - (node:58118) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 5): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 22:57:49.673] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 22:57:49.673] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 22:57:49.674] [TRACE] metadata - entering buildMetadata
[2016-12-03 22:57:49.678] [ERROR] console - (node:58118) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 6): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 23:00:42.880] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:00:42.882] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:00:42.886] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:00:42.897] [ERROR] console - (node:58611) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 23:00:42.897] [ERROR] console - (node:58611) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
[2016-12-03 23:02:42.887] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:02:42.888] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:02:42.889] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:02:42.895] [ERROR] console - (node:58611) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 23:06:18.625] [ERROR] console - Nicht verarbeiteter Fehler für Anforderung GET /odata: Error: Cannot GET /odata
    at raiseUrlNotFoundError (/Users/jan/nodejs/pinkus/node_modules/loopback/server/middleware/url-not-found.js:20:17)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/serve-static/index.js:121:7)
    at emitOne (events.js:96:13)
    at SendStream.emit (events.js:188:7)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/send/index.js:275:17)
    at SendStream.onStatError (/Users/jan/nodejs/pinkus/node_modules/send/index.js:392:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/send/index.js:683:16)
    at onstat (/Users/jan/nodejs/pinkus/node_modules/send/index.js:672:14)
    at FSReqWrap.oncomplete (fs.js:111:15)
[2016-12-03 23:06:27.498] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:06:27.499] [DEBUG] odata - baseUrl = /odata
[2016-12-03 23:07:50.608] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:07:50.609] [DEBUG] odata - baseUrl = /odata
[2016-12-03 23:07:56.510] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:07:56.510] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:07:56.512] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:07:56.524] [ERROR] console - (node:58838) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 23:07:56.524] [ERROR] console - (node:58838) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
[2016-12-03 23:07:57.021] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:07:57.021] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:07:57.021] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:07:57.028] [ERROR] console - (node:58838) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 23:08:49.866] [ERROR] console - Nicht verarbeiteter Fehler für Anforderung GET /odata: Error: Cannot GET /odata
    at raiseUrlNotFoundError (/Users/jan/nodejs/pinkus/node_modules/loopback/server/middleware/url-not-found.js:20:17)
    at Layer.handle [as handle_request] (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:312:13)
    at /Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:280:7
    at Function.process_params (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:330:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/express/lib/router/index.js:271:10)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/serve-static/index.js:121:7)
    at emitOne (events.js:96:13)
    at SendStream.emit (events.js:188:7)
    at SendStream.error (/Users/jan/nodejs/pinkus/node_modules/send/index.js:275:17)
    at SendStream.onStatError (/Users/jan/nodejs/pinkus/node_modules/send/index.js:392:12)
    at next (/Users/jan/nodejs/pinkus/node_modules/send/index.js:683:16)
    at onstat (/Users/jan/nodejs/pinkus/node_modules/send/index.js:672:14)
    at FSReqWrap.oncomplete (fs.js:111:15)
[2016-12-03 23:08:54.274] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:08:54.274] [DEBUG] odata - baseUrl = /odata
[2016-12-03 23:09:06.707] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:09:06.707] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:09:06.707] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:09:06.714] [ERROR] console - (node:58838) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 3): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 23:10:27.942] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:10:27.945] [DEBUG] odata - baseUrl = /odata
[2016-12-03 23:10:34.184] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:10:34.184] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:10:34.186] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:10:34.200] [ERROR] console - (node:58919) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 23:10:34.200] [ERROR] console - (node:58919) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
[2016-12-03 23:10:34.596] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:10:34.596] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:10:34.597] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:10:34.602] [ERROR] console - (node:58919) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 23:11:55.713] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:11:55.714] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:11:55.714] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:11:55.721] [ERROR] console - (node:58919) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 3): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 23:13:34.029] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:13:34.030] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:13:34.033] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:13:34.046] [ERROR] console - (node:59011) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 23:13:34.046] [ERROR] console - (node:59011) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
[2016-12-03 23:15:11.498] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:15:11.500] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-12-03 23:15:11.536] [INFO] console - filter: {"limit":1000}
[2016-12-03 23:15:27.631] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:15:27.632] [DEBUG] odata - baseUrl = /odata/Kunden(1)
[2016-12-03 23:15:27.639] [ERROR] console - entity data for request /odata/Kunden(1) was not found
[2016-12-03 23:15:27.639] [ERROR] console - An error occured:  404
[2016-12-03 23:15:34.118] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:15:34.118] [DEBUG] odata - baseUrl = /odata/Kunden('1')
[2016-12-03 23:15:34.123] [ERROR] console - entity data for request /odata/Kunden('1') was not found
[2016-12-03 23:15:34.123] [ERROR] console - An error occured:  404
[2016-12-03 23:15:42.223] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:15:42.224] [DEBUG] odata - baseUrl = /odata/Kunden(%221%22)
[2016-12-03 23:15:42.227] [ERROR] console - entity data for request /odata/Kunden(%221%22) was not found
[2016-12-03 23:15:42.228] [ERROR] console - An error occured:  404
[2016-12-03 23:15:46.837] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:15:46.837] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-12-03 23:15:46.888] [INFO] console - filter: {"limit":1000}
[2016-12-03 23:15:59.936] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:15:59.942] [DEBUG] odata - baseUrl = /odata/Kunde(1)
[2016-12-03 23:16:07.655] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:16:07.655] [DEBUG] odata - baseUrl = /odata/Kunden(1)
[2016-12-03 23:16:07.661] [ERROR] console - entity data for request /odata/Kunden(1) was not found
[2016-12-03 23:16:07.661] [ERROR] console - An error occured:  404
[2016-12-03 23:16:46.128] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:16:46.128] [DEBUG] odata - baseUrl = /odata/Kunden(id=1)
[2016-12-03 23:16:46.132] [ERROR] console - entity data for request /odata/Kunden(id=1) was not found
[2016-12-03 23:16:46.132] [ERROR] console - An error occured:  404
[2016-12-03 23:16:52.941] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:16:52.941] [DEBUG] odata - baseUrl = /odata/Kunden(id='1')
[2016-12-03 23:16:52.944] [ERROR] console - entity data for request /odata/Kunden(id='1') was not found
[2016-12-03 23:16:52.944] [ERROR] console - An error occured:  404
[2016-12-03 23:16:57.868] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:16:57.868] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-12-03 23:16:57.872] [INFO] console - filter: {"limit":1000}
[2016-12-03 23:17:09.873] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:17:09.874] [DEBUG] odata - baseUrl = /odata/Kunden('1')
[2016-12-03 23:17:09.880] [ERROR] console - entity data for request /odata/Kunden('1') was not found
[2016-12-03 23:17:09.880] [ERROR] console - An error occured:  404
[2016-12-03 23:17:15.332] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:17:15.333] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-12-03 23:17:15.337] [INFO] console - filter: {"limit":1000}
[2016-12-03 23:29:33.491] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:29:33.491] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:29:33.493] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:29:33.507] [ERROR] console - (node:59068) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 23:29:33.507] [ERROR] console - (node:59068) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
[2016-12-03 23:29:33.783] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:29:33.783] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:29:33.784] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:29:33.787] [ERROR] console - (node:59068) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 23:31:13.310] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:31:13.378] [ERROR] console - (node:59601) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 23:31:13.331] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:31:13.381] [ERROR] console - (node:59601) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
[2016-12-03 23:31:13.347] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:31:13.347] [TRACE] metadata - @Name User
[2016-12-03 23:31:13.350] [TRACE] metadata - @Name AccessToken
[2016-12-03 23:31:13.355] [TRACE] metadata - @Name ACL
[2016-12-03 23:31:13.356] [TRACE] metadata - @Name RoleMapping
[2016-12-03 23:31:13.356] [TRACE] metadata - @Name Role
[2016-12-03 23:31:13.356] [TRACE] metadata - @Name Kunde
[2016-12-03 23:31:16.403] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:31:16.409] [ERROR] console - (node:59601) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 23:31:16.403] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:31:16.404] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:31:16.404] [TRACE] metadata - @Name User
[2016-12-03 23:31:16.404] [TRACE] metadata - @Name AccessToken
[2016-12-03 23:31:16.404] [TRACE] metadata - @Name ACL
[2016-12-03 23:31:16.404] [TRACE] metadata - @Name RoleMapping
[2016-12-03 23:31:16.405] [TRACE] metadata - @Name Role
[2016-12-03 23:31:16.405] [TRACE] metadata - @Name Kunde
[2016-12-03 23:33:16.408] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:33:16.419] [ERROR] console - (node:59601) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 3): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 23:33:16.409] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:33:16.410] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:33:16.410] [TRACE] metadata - @Name User
[2016-12-03 23:33:16.411] [TRACE] metadata - @Name AccessToken
[2016-12-03 23:33:16.411] [TRACE] metadata - @Name ACL
[2016-12-03 23:33:16.412] [TRACE] metadata - @Name RoleMapping
[2016-12-03 23:33:16.412] [TRACE] metadata - @Name Role
[2016-12-03 23:33:16.412] [TRACE] metadata - @Name Kunde
[2016-12-03 23:34:41.919] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:34:42.117] [ERROR] console - (node:59713) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 23:34:41.922] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:34:42.120] [ERROR] console - (node:59713) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
[2016-12-03 23:34:41.980] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:34:41.981] [TRACE] metadata - Model User
[2016-12-03 23:34:41.982] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:41.982] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:41.982] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:41.982] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:41.982] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:41.982] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:41.982] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:41.983] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:41.983] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:41.983] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:41.983] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:41.983] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:41.984] [TRACE] metadata - Model AccessToken
[2016-12-03 23:34:41.985] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:41.985] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:41.985] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:41.985] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:41.985] [TRACE] metadata - Model ACL
[2016-12-03 23:34:42.099] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:42.099] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:42.099] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:42.099] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:42.099] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:42.099] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:42.100] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:42.100] [TRACE] metadata - Model RoleMapping
[2016-12-03 23:34:42.100] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:42.100] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:42.100] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:42.101] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:42.101] [TRACE] metadata - Model Role
[2016-12-03 23:34:42.101] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:42.101] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:42.103] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:42.103] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:42.103] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:42.103] [TRACE] metadata - Model Kunde
[2016-12-03 23:34:42.103] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:42.104] [TRACE] metadata - Property [object Object]
[2016-12-03 23:34:42.104] [TRACE] metadata - Property [object Object]
[2016-12-03 23:35:37.193] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:35:37.273] [ERROR] console - (node:59744) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 23:35:37.196] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:35:37.275] [ERROR] console - (node:59744) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
[2016-12-03 23:35:37.198] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:35:37.199] [TRACE] metadata - Model User
[2016-12-03 23:35:37.199] [TRACE] metadata - Property String
[2016-12-03 23:35:37.201] [TRACE] metadata - Property String
[2016-12-03 23:35:37.202] [TRACE] metadata - Property String
[2016-12-03 23:35:37.202] [TRACE] metadata - Property Object
[2016-12-03 23:35:37.203] [TRACE] metadata - Property Object
[2016-12-03 23:35:37.203] [TRACE] metadata - Property String
[2016-12-03 23:35:37.203] [TRACE] metadata - Property Boolean
[2016-12-03 23:35:37.204] [TRACE] metadata - Property String
[2016-12-03 23:35:37.204] [TRACE] metadata - Property String
[2016-12-03 23:35:37.204] [TRACE] metadata - Property Date
[2016-12-03 23:35:37.204] [TRACE] metadata - Property Date
[2016-12-03 23:35:37.205] [TRACE] metadata - Property ObjectID
[2016-12-03 23:35:37.206] [TRACE] metadata - Model AccessToken
[2016-12-03 23:35:37.206] [TRACE] metadata - Property String
[2016-12-03 23:35:37.207] [TRACE] metadata - Property Number
[2016-12-03 23:35:37.207] [TRACE] metadata - Property Date
[2016-12-03 23:35:37.207] [TRACE] metadata - Property ObjectID
[2016-12-03 23:35:37.208] [TRACE] metadata - Model ACL
[2016-12-03 23:35:37.208] [TRACE] metadata - Property String
[2016-12-03 23:35:37.208] [TRACE] metadata - Property String
[2016-12-03 23:35:37.208] [TRACE] metadata - Property String
[2016-12-03 23:35:37.209] [TRACE] metadata - Property String
[2016-12-03 23:35:37.209] [TRACE] metadata - Property String
[2016-12-03 23:35:37.209] [TRACE] metadata - Property String
[2016-12-03 23:35:37.210] [TRACE] metadata - Property ObjectID
[2016-12-03 23:35:37.210] [TRACE] metadata - Model RoleMapping
[2016-12-03 23:35:37.210] [TRACE] metadata - Property ObjectID
[2016-12-03 23:35:37.211] [TRACE] metadata - Property String
[2016-12-03 23:35:37.211] [TRACE] metadata - Property String
[2016-12-03 23:35:37.212] [TRACE] metadata - Property ObjectID
[2016-12-03 23:35:37.213] [TRACE] metadata - Model Role
[2016-12-03 23:35:37.213] [TRACE] metadata - Property ObjectID
[2016-12-03 23:35:37.213] [TRACE] metadata - Property String
[2016-12-03 23:35:37.217] [TRACE] metadata - Property String
[2016-12-03 23:35:37.218] [TRACE] metadata - Property Date
[2016-12-03 23:35:37.218] [TRACE] metadata - Property Date
[2016-12-03 23:35:37.219] [TRACE] metadata - Model Kunde
[2016-12-03 23:35:37.219] [TRACE] metadata - Property String
[2016-12-03 23:35:37.219] [TRACE] metadata - Property undefined
[2016-12-03 23:35:37.219] [TRACE] metadata - Property ObjectID
[2016-12-03 23:37:37.231] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:37:37.245] [ERROR] console - (node:59744) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: Missing attribute value for attribute Type of element Property
[2016-12-03 23:37:37.232] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:37:37.232] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:37:37.233] [TRACE] metadata - Model User
[2016-12-03 23:37:37.233] [TRACE] metadata - Property String
[2016-12-03 23:37:37.233] [TRACE] metadata - Property String
[2016-12-03 23:37:37.233] [TRACE] metadata - Property String
[2016-12-03 23:37:37.233] [TRACE] metadata - Property Object
[2016-12-03 23:37:37.233] [TRACE] metadata - Property Object
[2016-12-03 23:37:37.234] [TRACE] metadata - Property String
[2016-12-03 23:37:37.234] [TRACE] metadata - Property Boolean
[2016-12-03 23:37:37.234] [TRACE] metadata - Property String
[2016-12-03 23:37:37.234] [TRACE] metadata - Property String
[2016-12-03 23:37:37.234] [TRACE] metadata - Property Date
[2016-12-03 23:37:37.234] [TRACE] metadata - Property Date
[2016-12-03 23:37:37.234] [TRACE] metadata - Property ObjectID
[2016-12-03 23:37:37.235] [TRACE] metadata - Model AccessToken
[2016-12-03 23:37:37.235] [TRACE] metadata - Property String
[2016-12-03 23:37:37.235] [TRACE] metadata - Property Number
[2016-12-03 23:37:37.236] [TRACE] metadata - Property Date
[2016-12-03 23:37:37.236] [TRACE] metadata - Property ObjectID
[2016-12-03 23:37:37.236] [TRACE] metadata - Model ACL
[2016-12-03 23:37:37.236] [TRACE] metadata - Property String
[2016-12-03 23:37:37.236] [TRACE] metadata - Property String
[2016-12-03 23:37:37.236] [TRACE] metadata - Property String
[2016-12-03 23:37:37.237] [TRACE] metadata - Property String
[2016-12-03 23:37:37.237] [TRACE] metadata - Property String
[2016-12-03 23:37:37.237] [TRACE] metadata - Property String
[2016-12-03 23:37:37.237] [TRACE] metadata - Property ObjectID
[2016-12-03 23:37:37.237] [TRACE] metadata - Model RoleMapping
[2016-12-03 23:37:37.237] [TRACE] metadata - Property ObjectID
[2016-12-03 23:37:37.237] [TRACE] metadata - Property String
[2016-12-03 23:37:37.238] [TRACE] metadata - Property String
[2016-12-03 23:37:37.238] [TRACE] metadata - Property ObjectID
[2016-12-03 23:37:37.238] [TRACE] metadata - Model Role
[2016-12-03 23:37:37.238] [TRACE] metadata - Property ObjectID
[2016-12-03 23:37:37.238] [TRACE] metadata - Property String
[2016-12-03 23:37:37.238] [TRACE] metadata - Property String
[2016-12-03 23:37:37.238] [TRACE] metadata - Property Date
[2016-12-03 23:37:37.239] [TRACE] metadata - Property Date
[2016-12-03 23:37:37.239] [TRACE] metadata - Model Kunde
[2016-12-03 23:37:37.239] [TRACE] metadata - Property String
[2016-12-03 23:37:37.239] [TRACE] metadata - Property undefined
[2016-12-03 23:37:37.239] [TRACE] metadata - Property ObjectID
[2016-12-03 23:37:55.102] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:37:55.104] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:37:55.111] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:37:55.112] [TRACE] metadata - Model User
[2016-12-03 23:37:55.112] [TRACE] metadata - Property String
[2016-12-03 23:37:55.113] [TRACE] metadata - Property String
[2016-12-03 23:37:55.113] [TRACE] metadata - Property String
[2016-12-03 23:37:55.113] [TRACE] metadata - Property Object
[2016-12-03 23:37:55.113] [TRACE] metadata - Property Object
[2016-12-03 23:37:55.113] [TRACE] metadata - Property String
[2016-12-03 23:37:55.113] [TRACE] metadata - Property Boolean
[2016-12-03 23:37:55.114] [TRACE] metadata - Property String
[2016-12-03 23:37:55.114] [TRACE] metadata - Property String
[2016-12-03 23:37:55.114] [TRACE] metadata - Property Date
[2016-12-03 23:37:55.114] [TRACE] metadata - Property Date
[2016-12-03 23:37:55.114] [TRACE] metadata - Property ObjectID
[2016-12-03 23:37:55.117] [TRACE] metadata - Model AccessToken
[2016-12-03 23:37:55.118] [TRACE] metadata - Property String
[2016-12-03 23:37:55.118] [TRACE] metadata - Property Number
[2016-12-03 23:37:55.118] [TRACE] metadata - Property Date
[2016-12-03 23:37:55.118] [TRACE] metadata - Property ObjectID
[2016-12-03 23:37:55.119] [TRACE] metadata - Model ACL
[2016-12-03 23:37:55.120] [TRACE] metadata - Property String
[2016-12-03 23:37:55.120] [TRACE] metadata - Property String
[2016-12-03 23:37:55.121] [TRACE] metadata - Property String
[2016-12-03 23:37:55.121] [TRACE] metadata - Property String
[2016-12-03 23:37:55.121] [TRACE] metadata - Property String
[2016-12-03 23:37:55.121] [TRACE] metadata - Property String
[2016-12-03 23:37:55.121] [TRACE] metadata - Property ObjectID
[2016-12-03 23:37:55.122] [TRACE] metadata - Model RoleMapping
[2016-12-03 23:37:55.122] [TRACE] metadata - Property ObjectID
[2016-12-03 23:37:55.122] [TRACE] metadata - Property String
[2016-12-03 23:37:55.122] [TRACE] metadata - Property String
[2016-12-03 23:37:55.127] [TRACE] metadata - Property ObjectID
[2016-12-03 23:37:55.127] [TRACE] metadata - Model Role
[2016-12-03 23:37:55.127] [TRACE] metadata - Property ObjectID
[2016-12-03 23:37:55.127] [TRACE] metadata - Property String
[2016-12-03 23:37:55.127] [TRACE] metadata - Property String
[2016-12-03 23:37:55.131] [TRACE] metadata - Property Date
[2016-12-03 23:37:55.131] [TRACE] metadata - Property Date
[2016-12-03 23:37:55.132] [TRACE] metadata - Model Kunde
[2016-12-03 23:37:55.132] [TRACE] metadata - Property String
[2016-12-03 23:37:55.132] [TRACE] metadata - Property Number
[2016-12-03 23:37:55.132] [TRACE] metadata - Property ObjectID
[2016-12-03 23:37:55.160] [TRACE] metadata - metadata xml build
[2016-12-03 23:43:00.484] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:43:00.486] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:43:00.488] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:43:00.488] [TRACE] metadata - Model User
[2016-12-03 23:43:00.489] [TRACE] metadata - Property String
[2016-12-03 23:43:00.489] [TRACE] metadata - Property String
[2016-12-03 23:43:00.489] [TRACE] metadata - Property String
[2016-12-03 23:43:00.490] [TRACE] metadata - Property Object
[2016-12-03 23:43:00.490] [TRACE] metadata - Property Object
[2016-12-03 23:43:00.490] [TRACE] metadata - Property String
[2016-12-03 23:43:00.490] [TRACE] metadata - Property Boolean
[2016-12-03 23:43:00.490] [TRACE] metadata - Property String
[2016-12-03 23:43:00.490] [TRACE] metadata - Property String
[2016-12-03 23:43:00.490] [TRACE] metadata - Property Date
[2016-12-03 23:43:00.491] [TRACE] metadata - Property Date
[2016-12-03 23:43:00.491] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:00.492] [TRACE] metadata - Model AccessToken
[2016-12-03 23:43:00.492] [TRACE] metadata - Property String
[2016-12-03 23:43:00.492] [TRACE] metadata - Property Number
[2016-12-03 23:43:00.495] [TRACE] metadata - Property Date
[2016-12-03 23:43:00.495] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:00.496] [TRACE] metadata - Model ACL
[2016-12-03 23:43:00.496] [TRACE] metadata - Property String
[2016-12-03 23:43:00.496] [TRACE] metadata - Property String
[2016-12-03 23:43:00.496] [TRACE] metadata - Property String
[2016-12-03 23:43:00.496] [TRACE] metadata - Property String
[2016-12-03 23:43:00.496] [TRACE] metadata - Property String
[2016-12-03 23:43:00.496] [TRACE] metadata - Property String
[2016-12-03 23:43:00.497] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:00.497] [TRACE] metadata - Model RoleMapping
[2016-12-03 23:43:00.497] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:00.497] [TRACE] metadata - Property String
[2016-12-03 23:43:00.497] [TRACE] metadata - Property String
[2016-12-03 23:43:00.498] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:00.498] [TRACE] metadata - Model Role
[2016-12-03 23:43:00.498] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:00.498] [TRACE] metadata - Property String
[2016-12-03 23:43:00.498] [TRACE] metadata - Property String
[2016-12-03 23:43:00.498] [TRACE] metadata - Property Date
[2016-12-03 23:43:00.499] [TRACE] metadata - Property Date
[2016-12-03 23:43:00.499] [TRACE] metadata - Model Kunde
[2016-12-03 23:43:00.499] [TRACE] metadata - Property String
[2016-12-03 23:43:00.499] [TRACE] metadata - Property Number
[2016-12-03 23:43:00.499] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:00.499] [TRACE] metadata - Model Standort
[2016-12-03 23:43:00.499] [TRACE] metadata - Property String
[2016-12-03 23:43:00.500] [TRACE] metadata - Property String
[2016-12-03 23:43:00.500] [TRACE] metadata - Property Number
[2016-12-03 23:43:00.500] [TRACE] metadata - Property String
[2016-12-03 23:43:00.500] [TRACE] metadata - Property String
[2016-12-03 23:43:00.500] [TRACE] metadata - Property String
[2016-12-03 23:43:00.500] [TRACE] metadata - Property String
[2016-12-03 23:43:00.500] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:00.500] [TRACE] metadata - Model Raum
[2016-12-03 23:43:00.500] [TRACE] metadata - Property String
[2016-12-03 23:43:00.500] [TRACE] metadata - Property Date
[2016-12-03 23:43:00.501] [TRACE] metadata - Property String
[2016-12-03 23:43:00.501] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:00.501] [TRACE] metadata - Model Schulung
[2016-12-03 23:43:00.501] [TRACE] metadata - Property String
[2016-12-03 23:43:00.501] [TRACE] metadata - Property Number
[2016-12-03 23:43:00.501] [TRACE] metadata - Property String
[2016-12-03 23:43:00.502] [TRACE] metadata - Property Date
[2016-12-03 23:43:00.502] [TRACE] metadata - Property Date
[2016-12-03 23:43:00.503] [TRACE] metadata - Property Number
[2016-12-03 23:43:00.503] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:00.504] [TRACE] metadata - Model Kursinhalt
[2016-12-03 23:43:00.504] [TRACE] metadata - Property String
[2016-12-03 23:43:00.504] [TRACE] metadata - Property String
[2016-12-03 23:43:00.504] [TRACE] metadata - Property String
[2016-12-03 23:43:00.504] [TRACE] metadata - Property Date
[2016-12-03 23:43:00.504] [TRACE] metadata - Property Number
[2016-12-03 23:43:00.504] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:00.504] [TRACE] metadata - Model Dozent
[2016-12-03 23:43:00.504] [TRACE] metadata - Property Date
[2016-12-03 23:43:00.505] [TRACE] metadata - Property Date
[2016-12-03 23:43:00.505] [TRACE] metadata - Property String
[2016-12-03 23:43:00.505] [TRACE] metadata - Property String
[2016-12-03 23:43:00.505] [TRACE] metadata - Property String
[2016-12-03 23:43:00.505] [TRACE] metadata - Property Object
[2016-12-03 23:43:00.505] [TRACE] metadata - Property Object
[2016-12-03 23:43:00.505] [TRACE] metadata - Property String
[2016-12-03 23:43:00.505] [TRACE] metadata - Property Boolean
[2016-12-03 23:43:00.507] [TRACE] metadata - Property String
[2016-12-03 23:43:00.507] [TRACE] metadata - Property String
[2016-12-03 23:43:00.507] [TRACE] metadata - Property Date
[2016-12-03 23:43:00.507] [TRACE] metadata - Property Date
[2016-12-03 23:43:00.507] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:00.508] [TRACE] metadata - Model Teilnehmer
[2016-12-03 23:43:00.508] [TRACE] metadata - Property Date
[2016-12-03 23:43:00.508] [TRACE] metadata - Property Date
[2016-12-03 23:43:00.508] [TRACE] metadata - Property String
[2016-12-03 23:43:00.509] [TRACE] metadata - Property String
[2016-12-03 23:43:00.509] [TRACE] metadata - Property String
[2016-12-03 23:43:00.509] [TRACE] metadata - Property Object
[2016-12-03 23:43:00.509] [TRACE] metadata - Property Object
[2016-12-03 23:43:00.509] [TRACE] metadata - Property String
[2016-12-03 23:43:00.509] [TRACE] metadata - Property Boolean
[2016-12-03 23:43:00.509] [TRACE] metadata - Property String
[2016-12-03 23:43:00.509] [TRACE] metadata - Property String
[2016-12-03 23:43:00.509] [TRACE] metadata - Property Date
[2016-12-03 23:43:00.509] [TRACE] metadata - Property Date
[2016-12-03 23:43:00.509] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:00.510] [TRACE] metadata - Model Teilnehmergruppe
[2016-12-03 23:43:00.510] [TRACE] metadata - Property String
[2016-12-03 23:43:00.510] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:00.510] [TRACE] metadata - Model Kurs
[2016-12-03 23:43:00.510] [TRACE] metadata - Property String
[2016-12-03 23:43:00.510] [TRACE] metadata - Property String
[2016-12-03 23:43:00.510] [TRACE] metadata - Property Number
[2016-12-03 23:43:00.510] [TRACE] metadata - Property Number
[2016-12-03 23:43:00.510] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:00.511] [TRACE] metadata - Model Kurstermin
[2016-12-03 23:43:00.512] [TRACE] metadata - Property Date
[2016-12-03 23:43:00.512] [TRACE] metadata - Property Date
[2016-12-03 23:43:00.512] [TRACE] metadata - Property Number
[2016-12-03 23:43:00.512] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:00.548] [TRACE] metadata - metadata xml build
[2016-12-03 23:43:09.833] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:43:09.833] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:43:09.833] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:43:09.833] [TRACE] metadata - Model User
[2016-12-03 23:43:09.833] [TRACE] metadata - Property String
[2016-12-03 23:43:09.834] [TRACE] metadata - Property String
[2016-12-03 23:43:09.834] [TRACE] metadata - Property String
[2016-12-03 23:43:09.834] [TRACE] metadata - Property Object
[2016-12-03 23:43:09.834] [TRACE] metadata - Property Object
[2016-12-03 23:43:09.834] [TRACE] metadata - Property String
[2016-12-03 23:43:09.834] [TRACE] metadata - Property Boolean
[2016-12-03 23:43:09.836] [TRACE] metadata - Property String
[2016-12-03 23:43:09.837] [TRACE] metadata - Property String
[2016-12-03 23:43:09.838] [TRACE] metadata - Property Date
[2016-12-03 23:43:09.838] [TRACE] metadata - Property Date
[2016-12-03 23:43:09.838] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:09.838] [TRACE] metadata - Model AccessToken
[2016-12-03 23:43:09.838] [TRACE] metadata - Property String
[2016-12-03 23:43:09.839] [TRACE] metadata - Property Number
[2016-12-03 23:43:09.839] [TRACE] metadata - Property Date
[2016-12-03 23:43:09.839] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:09.839] [TRACE] metadata - Model ACL
[2016-12-03 23:43:09.839] [TRACE] metadata - Property String
[2016-12-03 23:43:09.839] [TRACE] metadata - Property String
[2016-12-03 23:43:09.839] [TRACE] metadata - Property String
[2016-12-03 23:43:09.840] [TRACE] metadata - Property String
[2016-12-03 23:43:09.840] [TRACE] metadata - Property String
[2016-12-03 23:43:09.842] [TRACE] metadata - Property String
[2016-12-03 23:43:09.842] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:09.842] [TRACE] metadata - Model RoleMapping
[2016-12-03 23:43:09.843] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:09.843] [TRACE] metadata - Property String
[2016-12-03 23:43:09.843] [TRACE] metadata - Property String
[2016-12-03 23:43:09.843] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:09.843] [TRACE] metadata - Model Role
[2016-12-03 23:43:09.843] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:09.843] [TRACE] metadata - Property String
[2016-12-03 23:43:09.844] [TRACE] metadata - Property String
[2016-12-03 23:43:09.844] [TRACE] metadata - Property Date
[2016-12-03 23:43:09.844] [TRACE] metadata - Property Date
[2016-12-03 23:43:09.845] [TRACE] metadata - Model Kunde
[2016-12-03 23:43:09.845] [TRACE] metadata - Property String
[2016-12-03 23:43:09.845] [TRACE] metadata - Property Number
[2016-12-03 23:43:09.845] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:09.845] [TRACE] metadata - Model Standort
[2016-12-03 23:43:09.845] [TRACE] metadata - Property String
[2016-12-03 23:43:09.845] [TRACE] metadata - Property String
[2016-12-03 23:43:09.845] [TRACE] metadata - Property Number
[2016-12-03 23:43:09.845] [TRACE] metadata - Property String
[2016-12-03 23:43:09.846] [TRACE] metadata - Property String
[2016-12-03 23:43:09.846] [TRACE] metadata - Property String
[2016-12-03 23:43:09.846] [TRACE] metadata - Property String
[2016-12-03 23:43:09.846] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:09.846] [TRACE] metadata - Model Raum
[2016-12-03 23:43:09.846] [TRACE] metadata - Property String
[2016-12-03 23:43:09.846] [TRACE] metadata - Property Date
[2016-12-03 23:43:09.847] [TRACE] metadata - Property String
[2016-12-03 23:43:09.847] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:09.847] [TRACE] metadata - Model Schulung
[2016-12-03 23:43:09.847] [TRACE] metadata - Property String
[2016-12-03 23:43:09.847] [TRACE] metadata - Property Number
[2016-12-03 23:43:09.847] [TRACE] metadata - Property String
[2016-12-03 23:43:09.847] [TRACE] metadata - Property Date
[2016-12-03 23:43:09.847] [TRACE] metadata - Property Date
[2016-12-03 23:43:09.847] [TRACE] metadata - Property Number
[2016-12-03 23:43:09.847] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:09.847] [TRACE] metadata - Model Kursinhalt
[2016-12-03 23:43:09.847] [TRACE] metadata - Property String
[2016-12-03 23:43:09.848] [TRACE] metadata - Property String
[2016-12-03 23:43:09.848] [TRACE] metadata - Property String
[2016-12-03 23:43:09.848] [TRACE] metadata - Property Date
[2016-12-03 23:43:09.848] [TRACE] metadata - Property Number
[2016-12-03 23:43:09.848] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:09.849] [TRACE] metadata - Model Dozent
[2016-12-03 23:43:09.849] [TRACE] metadata - Property Date
[2016-12-03 23:43:09.849] [TRACE] metadata - Property Date
[2016-12-03 23:43:09.849] [TRACE] metadata - Property String
[2016-12-03 23:43:09.850] [TRACE] metadata - Property String
[2016-12-03 23:43:09.850] [TRACE] metadata - Property String
[2016-12-03 23:43:09.854] [TRACE] metadata - Property Object
[2016-12-03 23:43:09.854] [TRACE] metadata - Property Object
[2016-12-03 23:43:09.854] [TRACE] metadata - Property String
[2016-12-03 23:43:09.854] [TRACE] metadata - Property Boolean
[2016-12-03 23:43:09.854] [TRACE] metadata - Property String
[2016-12-03 23:43:09.854] [TRACE] metadata - Property String
[2016-12-03 23:43:09.854] [TRACE] metadata - Property Date
[2016-12-03 23:43:09.855] [TRACE] metadata - Property Date
[2016-12-03 23:43:09.855] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:09.855] [TRACE] metadata - Model Teilnehmer
[2016-12-03 23:43:09.855] [TRACE] metadata - Property Date
[2016-12-03 23:43:09.855] [TRACE] metadata - Property Date
[2016-12-03 23:43:09.855] [TRACE] metadata - Property String
[2016-12-03 23:43:09.855] [TRACE] metadata - Property String
[2016-12-03 23:43:09.855] [TRACE] metadata - Property String
[2016-12-03 23:43:09.856] [TRACE] metadata - Property Object
[2016-12-03 23:43:09.856] [TRACE] metadata - Property Object
[2016-12-03 23:43:09.856] [TRACE] metadata - Property String
[2016-12-03 23:43:09.856] [TRACE] metadata - Property Boolean
[2016-12-03 23:43:09.856] [TRACE] metadata - Property String
[2016-12-03 23:43:09.856] [TRACE] metadata - Property String
[2016-12-03 23:43:09.856] [TRACE] metadata - Property Date
[2016-12-03 23:43:09.857] [TRACE] metadata - Property Date
[2016-12-03 23:43:09.857] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:09.857] [TRACE] metadata - Model Teilnehmergruppe
[2016-12-03 23:43:09.858] [TRACE] metadata - Property String
[2016-12-03 23:43:09.858] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:09.858] [TRACE] metadata - Model Kurs
[2016-12-03 23:43:09.858] [TRACE] metadata - Property String
[2016-12-03 23:43:09.858] [TRACE] metadata - Property String
[2016-12-03 23:43:09.858] [TRACE] metadata - Property Number
[2016-12-03 23:43:09.858] [TRACE] metadata - Property Number
[2016-12-03 23:43:09.858] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:09.858] [TRACE] metadata - Model Kurstermin
[2016-12-03 23:43:09.859] [TRACE] metadata - Property Date
[2016-12-03 23:43:09.859] [TRACE] metadata - Property Date
[2016-12-03 23:43:09.859] [TRACE] metadata - Property Number
[2016-12-03 23:43:09.859] [TRACE] metadata - Property ObjectID
[2016-12-03 23:43:09.872] [TRACE] metadata - metadata xml build
[2016-12-03 23:43:10.311] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:43:10.312] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-12-03 23:43:10.347] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:43:10.350] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-12-03 23:43:10.347] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-12-03 23:43:45.180] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:43:45.181] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-12-03 23:43:45.202] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:43:45.281] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-12-03 23:43:45.280] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-12-03 23:46:29.553] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:46:29.554] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:46:29.554] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:46:29.554] [TRACE] metadata - Model User
[2016-12-03 23:46:29.554] [TRACE] metadata - Property String
[2016-12-03 23:46:29.554] [TRACE] metadata - Property String
[2016-12-03 23:46:29.555] [TRACE] metadata - Property String
[2016-12-03 23:46:29.555] [TRACE] metadata - Property Object
[2016-12-03 23:46:29.555] [TRACE] metadata - Property Object
[2016-12-03 23:46:29.555] [TRACE] metadata - Property String
[2016-12-03 23:46:29.555] [TRACE] metadata - Property Boolean
[2016-12-03 23:46:29.555] [TRACE] metadata - Property String
[2016-12-03 23:46:29.556] [TRACE] metadata - Property String
[2016-12-03 23:46:29.556] [TRACE] metadata - Property Date
[2016-12-03 23:46:29.558] [TRACE] metadata - Property Date
[2016-12-03 23:46:29.558] [TRACE] metadata - Property ObjectID
[2016-12-03 23:46:29.558] [TRACE] metadata - Model AccessToken
[2016-12-03 23:46:29.559] [TRACE] metadata - Property String
[2016-12-03 23:46:29.559] [TRACE] metadata - Property Number
[2016-12-03 23:46:29.560] [TRACE] metadata - Property Date
[2016-12-03 23:46:29.560] [TRACE] metadata - Property ObjectID
[2016-12-03 23:46:29.561] [TRACE] metadata - Model ACL
[2016-12-03 23:46:29.561] [TRACE] metadata - Property String
[2016-12-03 23:46:29.561] [TRACE] metadata - Property String
[2016-12-03 23:46:29.561] [TRACE] metadata - Property String
[2016-12-03 23:46:29.561] [TRACE] metadata - Property String
[2016-12-03 23:46:29.562] [TRACE] metadata - Property String
[2016-12-03 23:46:29.562] [TRACE] metadata - Property String
[2016-12-03 23:46:29.562] [TRACE] metadata - Property ObjectID
[2016-12-03 23:46:29.562] [TRACE] metadata - Model RoleMapping
[2016-12-03 23:46:29.562] [TRACE] metadata - Property ObjectID
[2016-12-03 23:46:29.562] [TRACE] metadata - Property String
[2016-12-03 23:46:29.562] [TRACE] metadata - Property String
[2016-12-03 23:46:29.562] [TRACE] metadata - Property ObjectID
[2016-12-03 23:46:29.563] [TRACE] metadata - Model Role
[2016-12-03 23:46:29.563] [TRACE] metadata - Property ObjectID
[2016-12-03 23:46:29.563] [TRACE] metadata - Property String
[2016-12-03 23:46:29.563] [TRACE] metadata - Property String
[2016-12-03 23:46:29.563] [TRACE] metadata - Property Date
[2016-12-03 23:46:29.563] [TRACE] metadata - Property Date
[2016-12-03 23:46:29.564] [TRACE] metadata - Model Kunde
[2016-12-03 23:46:29.564] [TRACE] metadata - Property String
[2016-12-03 23:46:29.564] [TRACE] metadata - Property Number
[2016-12-03 23:46:29.564] [TRACE] metadata - Property ObjectID
[2016-12-03 23:46:29.564] [TRACE] metadata - Model Standort
[2016-12-03 23:46:29.564] [TRACE] metadata - Property String
[2016-12-03 23:46:29.564] [TRACE] metadata - Property String
[2016-12-03 23:46:29.564] [TRACE] metadata - Property Number
[2016-12-03 23:46:29.564] [TRACE] metadata - Property String
[2016-12-03 23:46:29.565] [TRACE] metadata - Property String
[2016-12-03 23:46:29.565] [TRACE] metadata - Property String
[2016-12-03 23:46:29.565] [TRACE] metadata - Property String
[2016-12-03 23:46:29.565] [TRACE] metadata - Property ObjectID
[2016-12-03 23:46:29.565] [TRACE] metadata - Model Raum
[2016-12-03 23:46:29.565] [TRACE] metadata - Property String
[2016-12-03 23:46:29.565] [TRACE] metadata - Property Date
[2016-12-03 23:46:29.565] [TRACE] metadata - Property String
[2016-12-03 23:46:29.565] [TRACE] metadata - Property ObjectID
[2016-12-03 23:46:29.565] [TRACE] metadata - Model Schulung
[2016-12-03 23:46:29.565] [TRACE] metadata - Property String
[2016-12-03 23:46:29.566] [TRACE] metadata - Property Number
[2016-12-03 23:46:29.566] [TRACE] metadata - Property String
[2016-12-03 23:46:29.566] [TRACE] metadata - Property Date
[2016-12-03 23:46:29.566] [TRACE] metadata - Property Date
[2016-12-03 23:46:29.566] [TRACE] metadata - Property Number
[2016-12-03 23:46:29.566] [TRACE] metadata - Property ObjectID
[2016-12-03 23:46:29.567] [TRACE] metadata - Model Kursinhalt
[2016-12-03 23:46:29.567] [TRACE] metadata - Property String
[2016-12-03 23:46:29.567] [TRACE] metadata - Property String
[2016-12-03 23:46:29.567] [TRACE] metadata - Property String
[2016-12-03 23:46:29.567] [TRACE] metadata - Property Date
[2016-12-03 23:46:29.567] [TRACE] metadata - Property Number
[2016-12-03 23:46:29.567] [TRACE] metadata - Property ObjectID
[2016-12-03 23:46:29.567] [TRACE] metadata - Model Dozent
[2016-12-03 23:46:29.567] [TRACE] metadata - Property Date
[2016-12-03 23:46:29.567] [TRACE] metadata - Property Date
[2016-12-03 23:46:29.567] [TRACE] metadata - Property String
[2016-12-03 23:46:29.568] [TRACE] metadata - Property String
[2016-12-03 23:46:29.568] [TRACE] metadata - Property String
[2016-12-03 23:46:29.568] [TRACE] metadata - Property Object
[2016-12-03 23:46:29.568] [TRACE] metadata - Property Object
[2016-12-03 23:46:29.568] [TRACE] metadata - Property String
[2016-12-03 23:46:29.568] [TRACE] metadata - Property Boolean
[2016-12-03 23:46:29.568] [TRACE] metadata - Property String
[2016-12-03 23:46:29.568] [TRACE] metadata - Property String
[2016-12-03 23:46:29.568] [TRACE] metadata - Property Date
[2016-12-03 23:46:29.569] [TRACE] metadata - Property Date
[2016-12-03 23:46:29.569] [TRACE] metadata - Property ObjectID
[2016-12-03 23:46:29.569] [TRACE] metadata - Model Teilnehmer
[2016-12-03 23:46:29.569] [TRACE] metadata - Property Date
[2016-12-03 23:46:29.569] [TRACE] metadata - Property Date
[2016-12-03 23:46:29.569] [TRACE] metadata - Property String
[2016-12-03 23:46:29.569] [TRACE] metadata - Property String
[2016-12-03 23:46:29.569] [TRACE] metadata - Property String
[2016-12-03 23:46:29.569] [TRACE] metadata - Property Object
[2016-12-03 23:46:29.569] [TRACE] metadata - Property Object
[2016-12-03 23:46:29.570] [TRACE] metadata - Property String
[2016-12-03 23:46:29.570] [TRACE] metadata - Property Boolean
[2016-12-03 23:46:29.570] [TRACE] metadata - Property String
[2016-12-03 23:46:29.570] [TRACE] metadata - Property String
[2016-12-03 23:46:29.570] [TRACE] metadata - Property Date
[2016-12-03 23:46:29.571] [TRACE] metadata - Property Date
[2016-12-03 23:46:29.571] [TRACE] metadata - Property ObjectID
[2016-12-03 23:46:29.571] [TRACE] metadata - Model Teilnehmergruppe
[2016-12-03 23:46:29.571] [TRACE] metadata - Property String
[2016-12-03 23:46:29.571] [TRACE] metadata - Property ObjectID
[2016-12-03 23:46:29.572] [TRACE] metadata - Model Kurs
[2016-12-03 23:46:29.572] [TRACE] metadata - Property String
[2016-12-03 23:46:29.572] [TRACE] metadata - Property String
[2016-12-03 23:46:29.572] [TRACE] metadata - Property Number
[2016-12-03 23:46:29.572] [TRACE] metadata - Property Number
[2016-12-03 23:46:29.572] [TRACE] metadata - Property ObjectID
[2016-12-03 23:46:29.572] [TRACE] metadata - Model Kurstermin
[2016-12-03 23:46:29.572] [TRACE] metadata - Property Date
[2016-12-03 23:46:29.572] [TRACE] metadata - Property Date
[2016-12-03 23:46:29.573] [TRACE] metadata - Property Number
[2016-12-03 23:46:29.573] [TRACE] metadata - Property ObjectID
[2016-12-03 23:46:29.587] [TRACE] metadata - metadata xml build
[2016-12-03 23:46:29.811] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:46:29.812] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-12-03 23:46:29.826] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:46:29.827] [INFO] console - filter: {"limit":"1","skip":"0"}
[2016-12-03 23:46:29.826] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-12-03 23:49:28.798] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:49:28.800] [INFO] console - filter: {"limit":1000}
[2016-12-03 23:49:28.799] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-12-03 23:50:37.490] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:50:37.492] [INFO] console - filter: {"limit":1000}
[2016-12-03 23:50:37.490] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-12-03 23:50:50.313] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:50:50.313] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:50:50.314] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:50:50.314] [TRACE] metadata - Model User
[2016-12-03 23:50:50.314] [TRACE] metadata - Property String
[2016-12-03 23:50:50.314] [TRACE] metadata - Property String
[2016-12-03 23:50:50.315] [TRACE] metadata - Property String
[2016-12-03 23:50:50.315] [TRACE] metadata - Property Object
[2016-12-03 23:50:50.315] [TRACE] metadata - Property Object
[2016-12-03 23:50:50.315] [TRACE] metadata - Property String
[2016-12-03 23:50:50.315] [TRACE] metadata - Property Boolean
[2016-12-03 23:50:50.315] [TRACE] metadata - Property String
[2016-12-03 23:50:50.315] [TRACE] metadata - Property String
[2016-12-03 23:50:50.315] [TRACE] metadata - Property Date
[2016-12-03 23:50:50.315] [TRACE] metadata - Property Date
[2016-12-03 23:50:50.316] [TRACE] metadata - Property ObjectID
[2016-12-03 23:50:50.316] [TRACE] metadata - Model AccessToken
[2016-12-03 23:50:50.316] [TRACE] metadata - Property String
[2016-12-03 23:50:50.316] [TRACE] metadata - Property Number
[2016-12-03 23:50:50.316] [TRACE] metadata - Property Date
[2016-12-03 23:50:50.316] [TRACE] metadata - Property ObjectID
[2016-12-03 23:50:50.316] [TRACE] metadata - Model ACL
[2016-12-03 23:50:50.316] [TRACE] metadata - Property String
[2016-12-03 23:50:50.317] [TRACE] metadata - Property String
[2016-12-03 23:50:50.317] [TRACE] metadata - Property String
[2016-12-03 23:50:50.317] [TRACE] metadata - Property String
[2016-12-03 23:50:50.317] [TRACE] metadata - Property String
[2016-12-03 23:50:50.317] [TRACE] metadata - Property String
[2016-12-03 23:50:50.317] [TRACE] metadata - Property ObjectID
[2016-12-03 23:50:50.318] [TRACE] metadata - Model RoleMapping
[2016-12-03 23:50:50.318] [TRACE] metadata - Property ObjectID
[2016-12-03 23:50:50.318] [TRACE] metadata - Property String
[2016-12-03 23:50:50.318] [TRACE] metadata - Property String
[2016-12-03 23:50:50.318] [TRACE] metadata - Property ObjectID
[2016-12-03 23:50:50.318] [TRACE] metadata - Model Role
[2016-12-03 23:50:50.318] [TRACE] metadata - Property ObjectID
[2016-12-03 23:50:50.318] [TRACE] metadata - Property String
[2016-12-03 23:50:50.319] [TRACE] metadata - Property String
[2016-12-03 23:50:50.319] [TRACE] metadata - Property Date
[2016-12-03 23:50:50.319] [TRACE] metadata - Property Date
[2016-12-03 23:50:50.319] [TRACE] metadata - Model Kunde
[2016-12-03 23:50:50.319] [TRACE] metadata - Property String
[2016-12-03 23:50:50.319] [TRACE] metadata - Property Number
[2016-12-03 23:50:50.319] [TRACE] metadata - Property ObjectID
[2016-12-03 23:50:50.319] [TRACE] metadata - Model Standort
[2016-12-03 23:50:50.320] [TRACE] metadata - Property String
[2016-12-03 23:50:50.320] [TRACE] metadata - Property String
[2016-12-03 23:50:50.321] [TRACE] metadata - Property Number
[2016-12-03 23:50:50.321] [TRACE] metadata - Property String
[2016-12-03 23:50:50.321] [TRACE] metadata - Property String
[2016-12-03 23:50:50.321] [TRACE] metadata - Property String
[2016-12-03 23:50:50.321] [TRACE] metadata - Property String
[2016-12-03 23:50:50.322] [TRACE] metadata - Property ObjectID
[2016-12-03 23:50:50.322] [TRACE] metadata - Model Raum
[2016-12-03 23:50:50.322] [TRACE] metadata - Property String
[2016-12-03 23:50:50.322] [TRACE] metadata - Property Date
[2016-12-03 23:50:50.322] [TRACE] metadata - Property String
[2016-12-03 23:50:50.323] [TRACE] metadata - Property ObjectID
[2016-12-03 23:50:50.323] [TRACE] metadata - Model Schulung
[2016-12-03 23:50:50.323] [TRACE] metadata - Property String
[2016-12-03 23:50:50.323] [TRACE] metadata - Property Number
[2016-12-03 23:50:50.323] [TRACE] metadata - Property String
[2016-12-03 23:50:50.323] [TRACE] metadata - Property Date
[2016-12-03 23:50:50.323] [TRACE] metadata - Property Date
[2016-12-03 23:50:50.323] [TRACE] metadata - Property Number
[2016-12-03 23:50:50.323] [TRACE] metadata - Property ObjectID
[2016-12-03 23:50:50.324] [TRACE] metadata - Model Kursinhalt
[2016-12-03 23:50:50.324] [TRACE] metadata - Property String
[2016-12-03 23:50:50.324] [TRACE] metadata - Property String
[2016-12-03 23:50:50.324] [TRACE] metadata - Property String
[2016-12-03 23:50:50.324] [TRACE] metadata - Property Date
[2016-12-03 23:50:50.324] [TRACE] metadata - Property Number
[2016-12-03 23:50:50.324] [TRACE] metadata - Property ObjectID
[2016-12-03 23:50:50.324] [TRACE] metadata - Model Dozent
[2016-12-03 23:50:50.324] [TRACE] metadata - Property Date
[2016-12-03 23:50:50.324] [TRACE] metadata - Property Date
[2016-12-03 23:50:50.324] [TRACE] metadata - Property String
[2016-12-03 23:50:50.324] [TRACE] metadata - Property String
[2016-12-03 23:50:50.325] [TRACE] metadata - Property String
[2016-12-03 23:50:50.325] [TRACE] metadata - Property Object
[2016-12-03 23:50:50.325] [TRACE] metadata - Property Object
[2016-12-03 23:50:50.325] [TRACE] metadata - Property String
[2016-12-03 23:50:50.325] [TRACE] metadata - Property Boolean
[2016-12-03 23:50:50.325] [TRACE] metadata - Property String
[2016-12-03 23:50:50.325] [TRACE] metadata - Property String
[2016-12-03 23:50:50.325] [TRACE] metadata - Property Date
[2016-12-03 23:50:50.325] [TRACE] metadata - Property Date
[2016-12-03 23:50:50.325] [TRACE] metadata - Property ObjectID
[2016-12-03 23:50:50.325] [TRACE] metadata - Model Teilnehmer
[2016-12-03 23:50:50.326] [TRACE] metadata - Property Date
[2016-12-03 23:50:50.326] [TRACE] metadata - Property Date
[2016-12-03 23:50:50.326] [TRACE] metadata - Property String
[2016-12-03 23:50:50.326] [TRACE] metadata - Property String
[2016-12-03 23:50:50.326] [TRACE] metadata - Property String
[2016-12-03 23:50:50.326] [TRACE] metadata - Property Object
[2016-12-03 23:50:50.326] [TRACE] metadata - Property Object
[2016-12-03 23:50:50.326] [TRACE] metadata - Property String
[2016-12-03 23:50:50.326] [TRACE] metadata - Property Boolean
[2016-12-03 23:50:50.326] [TRACE] metadata - Property String
[2016-12-03 23:50:50.326] [TRACE] metadata - Property String
[2016-12-03 23:50:50.327] [TRACE] metadata - Property Date
[2016-12-03 23:50:50.327] [TRACE] metadata - Property Date
[2016-12-03 23:50:50.327] [TRACE] metadata - Property ObjectID
[2016-12-03 23:50:50.327] [TRACE] metadata - Model Teilnehmergruppe
[2016-12-03 23:50:50.327] [TRACE] metadata - Property String
[2016-12-03 23:50:50.327] [TRACE] metadata - Property ObjectID
[2016-12-03 23:50:50.327] [TRACE] metadata - Model Kurs
[2016-12-03 23:50:50.327] [TRACE] metadata - Property String
[2016-12-03 23:50:50.327] [TRACE] metadata - Property String
[2016-12-03 23:50:50.327] [TRACE] metadata - Property Number
[2016-12-03 23:50:50.327] [TRACE] metadata - Property Number
[2016-12-03 23:50:50.328] [TRACE] metadata - Property ObjectID
[2016-12-03 23:50:50.328] [TRACE] metadata - Model Kurstermin
[2016-12-03 23:50:50.328] [TRACE] metadata - Property Date
[2016-12-03 23:50:50.329] [TRACE] metadata - Property Date
[2016-12-03 23:50:50.329] [TRACE] metadata - Property Number
[2016-12-03 23:50:50.329] [TRACE] metadata - Property ObjectID
[2016-12-03 23:50:50.343] [TRACE] metadata - metadata xml build
[2016-12-03 23:50:50.528] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:50:50.528] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-12-03 23:50:50.543] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:50:50.543] [INFO] console - filter: {"limit":"2","skip":"0"}
[2016-12-03 23:50:50.543] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-12-03 23:54:32.484] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:54:32.484] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:54:32.484] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:54:32.484] [TRACE] metadata - Model User
[2016-12-03 23:54:32.484] [TRACE] metadata - Property String
[2016-12-03 23:54:32.485] [TRACE] metadata - Property String
[2016-12-03 23:54:32.486] [TRACE] metadata - Property String
[2016-12-03 23:54:32.486] [TRACE] metadata - Property Object
[2016-12-03 23:54:32.487] [TRACE] metadata - Property Object
[2016-12-03 23:54:32.487] [TRACE] metadata - Property String
[2016-12-03 23:54:32.487] [TRACE] metadata - Property Boolean
[2016-12-03 23:54:32.487] [TRACE] metadata - Property String
[2016-12-03 23:54:32.487] [TRACE] metadata - Property String
[2016-12-03 23:54:32.487] [TRACE] metadata - Property Date
[2016-12-03 23:54:32.487] [TRACE] metadata - Property Date
[2016-12-03 23:54:32.488] [TRACE] metadata - Property ObjectID
[2016-12-03 23:54:32.488] [TRACE] metadata - Model AccessToken
[2016-12-03 23:54:32.488] [TRACE] metadata - Property String
[2016-12-03 23:54:32.488] [TRACE] metadata - Property Number
[2016-12-03 23:54:32.488] [TRACE] metadata - Property Date
[2016-12-03 23:54:32.488] [TRACE] metadata - Property ObjectID
[2016-12-03 23:54:32.488] [TRACE] metadata - Model ACL
[2016-12-03 23:54:32.489] [TRACE] metadata - Property String
[2016-12-03 23:54:32.489] [TRACE] metadata - Property String
[2016-12-03 23:54:32.489] [TRACE] metadata - Property String
[2016-12-03 23:54:32.489] [TRACE] metadata - Property String
[2016-12-03 23:54:32.489] [TRACE] metadata - Property String
[2016-12-03 23:54:32.489] [TRACE] metadata - Property String
[2016-12-03 23:54:32.489] [TRACE] metadata - Property ObjectID
[2016-12-03 23:54:32.489] [TRACE] metadata - Model RoleMapping
[2016-12-03 23:54:32.489] [TRACE] metadata - Property ObjectID
[2016-12-03 23:54:32.489] [TRACE] metadata - Property String
[2016-12-03 23:54:32.489] [TRACE] metadata - Property String
[2016-12-03 23:54:32.490] [TRACE] metadata - Property ObjectID
[2016-12-03 23:54:32.490] [TRACE] metadata - Model Role
[2016-12-03 23:54:32.490] [TRACE] metadata - Property ObjectID
[2016-12-03 23:54:32.490] [TRACE] metadata - Property String
[2016-12-03 23:54:32.490] [TRACE] metadata - Property String
[2016-12-03 23:54:32.490] [TRACE] metadata - Property Date
[2016-12-03 23:54:32.490] [TRACE] metadata - Property Date
[2016-12-03 23:54:32.490] [TRACE] metadata - Model Kunde
[2016-12-03 23:54:32.490] [TRACE] metadata - Property String
[2016-12-03 23:54:32.490] [TRACE] metadata - Property Number
[2016-12-03 23:54:32.491] [TRACE] metadata - Property ObjectID
[2016-12-03 23:54:32.491] [TRACE] metadata - Model Standort
[2016-12-03 23:54:32.491] [TRACE] metadata - Property String
[2016-12-03 23:54:32.491] [TRACE] metadata - Property String
[2016-12-03 23:54:32.491] [TRACE] metadata - Property Number
[2016-12-03 23:54:32.491] [TRACE] metadata - Property String
[2016-12-03 23:54:32.491] [TRACE] metadata - Property String
[2016-12-03 23:54:32.491] [TRACE] metadata - Property String
[2016-12-03 23:54:32.491] [TRACE] metadata - Property String
[2016-12-03 23:54:32.491] [TRACE] metadata - Property ObjectID
[2016-12-03 23:54:32.491] [TRACE] metadata - Model Raum
[2016-12-03 23:54:32.491] [TRACE] metadata - Property String
[2016-12-03 23:54:32.492] [TRACE] metadata - Property Date
[2016-12-03 23:54:32.492] [TRACE] metadata - Property String
[2016-12-03 23:54:32.492] [TRACE] metadata - Property ObjectID
[2016-12-03 23:54:32.492] [TRACE] metadata - Model Schulung
[2016-12-03 23:54:32.492] [TRACE] metadata - Property String
[2016-12-03 23:54:32.492] [TRACE] metadata - Property Number
[2016-12-03 23:54:32.492] [TRACE] metadata - Property String
[2016-12-03 23:54:32.492] [TRACE] metadata - Property Date
[2016-12-03 23:54:32.492] [TRACE] metadata - Property Date
[2016-12-03 23:54:32.492] [TRACE] metadata - Property Number
[2016-12-03 23:54:32.492] [TRACE] metadata - Property ObjectID
[2016-12-03 23:54:32.492] [TRACE] metadata - Model Kursinhalt
[2016-12-03 23:54:32.493] [TRACE] metadata - Property String
[2016-12-03 23:54:32.493] [TRACE] metadata - Property String
[2016-12-03 23:54:32.493] [TRACE] metadata - Property String
[2016-12-03 23:54:32.493] [TRACE] metadata - Property Date
[2016-12-03 23:54:32.493] [TRACE] metadata - Property Number
[2016-12-03 23:54:32.493] [TRACE] metadata - Property ObjectID
[2016-12-03 23:54:32.493] [TRACE] metadata - Model Dozent
[2016-12-03 23:54:32.493] [TRACE] metadata - Property Date
[2016-12-03 23:54:32.493] [TRACE] metadata - Property Date
[2016-12-03 23:54:32.493] [TRACE] metadata - Property String
[2016-12-03 23:54:32.493] [TRACE] metadata - Property String
[2016-12-03 23:54:32.493] [TRACE] metadata - Property String
[2016-12-03 23:54:32.494] [TRACE] metadata - Property Object
[2016-12-03 23:54:32.494] [TRACE] metadata - Property Object
[2016-12-03 23:54:32.494] [TRACE] metadata - Property String
[2016-12-03 23:54:32.494] [TRACE] metadata - Property Boolean
[2016-12-03 23:54:32.494] [TRACE] metadata - Property String
[2016-12-03 23:54:32.494] [TRACE] metadata - Property String
[2016-12-03 23:54:32.494] [TRACE] metadata - Property Date
[2016-12-03 23:54:32.494] [TRACE] metadata - Property Date
[2016-12-03 23:54:32.494] [TRACE] metadata - Property ObjectID
[2016-12-03 23:54:32.494] [TRACE] metadata - Model Teilnehmer
[2016-12-03 23:54:32.495] [TRACE] metadata - Property Date
[2016-12-03 23:54:32.495] [TRACE] metadata - Property Date
[2016-12-03 23:54:32.495] [TRACE] metadata - Property String
[2016-12-03 23:54:32.495] [TRACE] metadata - Property String
[2016-12-03 23:54:32.495] [TRACE] metadata - Property String
[2016-12-03 23:54:32.495] [TRACE] metadata - Property Object
[2016-12-03 23:54:32.495] [TRACE] metadata - Property Object
[2016-12-03 23:54:32.495] [TRACE] metadata - Property String
[2016-12-03 23:54:32.495] [TRACE] metadata - Property Boolean
[2016-12-03 23:54:32.495] [TRACE] metadata - Property String
[2016-12-03 23:54:32.495] [TRACE] metadata - Property String
[2016-12-03 23:54:32.496] [TRACE] metadata - Property Date
[2016-12-03 23:54:32.496] [TRACE] metadata - Property Date
[2016-12-03 23:54:32.496] [TRACE] metadata - Property ObjectID
[2016-12-03 23:54:32.496] [TRACE] metadata - Model Teilnehmergruppe
[2016-12-03 23:54:32.496] [TRACE] metadata - Property String
[2016-12-03 23:54:32.496] [TRACE] metadata - Property ObjectID
[2016-12-03 23:54:32.496] [TRACE] metadata - Model Kurs
[2016-12-03 23:54:32.496] [TRACE] metadata - Property String
[2016-12-03 23:54:32.496] [TRACE] metadata - Property String
[2016-12-03 23:54:32.496] [TRACE] metadata - Property Number
[2016-12-03 23:54:32.496] [TRACE] metadata - Property Number
[2016-12-03 23:54:32.497] [TRACE] metadata - Property ObjectID
[2016-12-03 23:54:32.497] [TRACE] metadata - Model Kurstermin
[2016-12-03 23:54:32.497] [TRACE] metadata - Property Date
[2016-12-03 23:54:32.497] [TRACE] metadata - Property Date
[2016-12-03 23:54:32.497] [TRACE] metadata - Property Number
[2016-12-03 23:54:32.497] [TRACE] metadata - Property ObjectID
[2016-12-03 23:54:32.502] [TRACE] metadata - metadata xml build
[2016-12-03 23:54:32.668] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:54:32.668] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-12-03 23:54:32.684] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:54:32.684] [INFO] console - filter: {"limit":"2","skip":"0"}
[2016-12-03 23:54:32.684] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-12-03 23:55:15.695] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:55:15.695] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-12-03 23:55:15.708] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:55:15.734] [INFO] console - filter: {"where":{"status":{"regexp":"/undefined/"}},"limit":"2","skip":"0"}
[2016-12-03 23:55:15.709] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-12-03 23:55:22.933] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:55:22.934] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-12-03 23:55:22.945] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:55:22.949] [INFO] console - filter: {"where":{"status":{"regexp":"/1/"}},"limit":"2","skip":"0"}
[2016-12-03 23:55:22.945] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-12-03 23:55:27.209] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:55:27.210] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-12-03 23:55:27.220] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:55:27.221] [INFO] console - filter: {"limit":"2","skip":"0"}
[2016-12-03 23:55:27.220] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-12-03 23:59:30.307] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:59:30.311] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: { email: [Function], password: [Function] },
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'User',
     rawProperties: 
      { realm: [Object],
        username: [Object],
        password: [Object],
        credentials: [Object],
        challenges: [Object],
        email: [Object],
        emailVerified: 'boolean',
        verificationToken: 'string',
        status: 'string',
        created: 'date',
        lastUpdated: 'date',
        id: [Object] },
     settings: 
      { strict: false,
        base: [Object],
        replaceOnPUT: false,
        caseSensitiveEmail: true,
        hidden: [Object],
        acls: [Object],
        relations: [Object],
        maxTTL: 31556926,
        ttl: 1209600 },
     relations: [],
     properties: 
      { realm: [Object],
        username: [Object],
        password: [Object],
        credentials: [Object],
        challenges: [Object],
        email: [Object],
        emailVerified: [Object],
        verificationToken: [Object],
        status: [Object],
        created: [Object],
        lastUpdated: [Object],
        id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        patchOrCreateWithWhere: [Object],
        upsertWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        replaceById: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db' },
     replaceOnPUT: false,
     caseSensitiveEmail: true,
     hidden: [ 'password', 'verificationToken' ],
     acls: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     relations: { accessTokens: [Object] },
     maxTTL: 31556926,
     ttl: 1209600 },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'User',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Users', verb: 'all' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'User.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  normalizeCredentials: [Function],
  login: [Function],
  logout: [Function],
  generateVerificationToken: [Function],
  confirm: [Function],
  resetPassword: [Function],
  hashPassword: [Function],
  validatePassword: [Function],
  email: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'Email',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: 'Model' },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'Email',
        ctor: [Circular],
        _methods: [],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     send: [Function],
     autoAttach: 'mail' },
  accessToken: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        patchOrCreateWithWhere: [Object],
        upsertWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        replaceById: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db' },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'AccessToken',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: null,
        json: null },
     settings: 
      { strict: false,
        base: [Object],
        replaceOnPUT: false,
        relations: [Object],
        acls: [Object] },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'AccessToken',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: [Function],
     patchOrCreate: [Function],
     updateOrCreate: [Function],
     upsert: [Function],
     patchOrCreateWithWhere: [Function],
     upsertWithWhere: [Function],
     replaceOrCreate: [Function: replaceOrCreate],
     findOrCreate: [Function: findOrCreate],
     exists: [Function: exists],
     findById: [Function: findById],
     find: [Function: find],
     findOne: [Function: findOne],
     destroyAll: [Function: destroyAll],
     remove: [Function: destroyAll],
     deleteAll: [Function: destroyAll],
     updateAll: [Function],
     update: [Function],
     destroyById: [Function: deleteById],
     removeById: [Function: deleteById],
     deleteById: [Function: deleteById],
     count: [Function],
     replaceById: [Function],
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     ANONYMOUS: 
      { id: '$anonymous',
        created: 2016-12-03T22:59:23.764Z,
        ttl: 1209600 },
     createAccessTokenId: [Function],
     findForRequest: [Function],
     autoAttach: 'db',
     _mixins: [ [Object], [Object], [Object], [Object] ],
     _forDB: [Function],
     defaultScope: [Function],
     applyScope: [Function],
     applyProperties: [Function],
     lookupModel: [Function],
     getConnector: [Function],
     findByIds: [Function],
     all: [Function],
     _getSetting: [Function],
     _normalize: [Function],
     _coerce: [Function],
     scope: [Function],
     normalizeInclude: [Function: normalizeInclude],
     include: [Function],
     hasMany: [Function: hasMany],
     belongsTo: [Function],
     hasAndBelongsToMany: [Function: hasAndBelongsToMany],
     hasOne: [Function: hasOne],
     referencesMany: [Function: referencesMany],
     embedsOne: [Function: embedsOne],
     embedsMany: [Function: embedsMany],
     beginTransaction: [Function],
     Transaction: 
      { [Function: Transaction]
        super_: [Object],
        SERIALIZABLE: 'SERIALIZABLE',
        REPEATABLE_READ: 'REPEATABLE READ',
        READ_COMMITTED: 'READ COMMITTED',
        READ_UNCOMMITTED: 'READ UNCOMMITTED',
        hookTypes: [Object],
        begin: [Function] },
     _scopeMeta: {},
     shared: false,
     app: 
      { [Function: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 3,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        enableAuth: [Function],
        dataSources: [Object],
        datasources: [Object],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Object],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Object],
        _skipLayerSorting: false,
        isAuthEnabled: true } },
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  shared: true,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Circular],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Circular],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Circular],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true },
  scopes: 
   { accessTokens: 
      ScopeDefinition {
        isStatic: false,
        modelFrom: [Object],
        modelTo: [Object],
        name: 'accessTokens',
        params: [Function],
        methods: [Object],
        options: [Object] } } }
[2016-12-03 23:59:30.309] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-03 23:59:30.443] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'AccessToken',
     rawProperties: 
      { id: [Object],
        ttl: [Object],
        created: [Object],
        userId: [Object] },
     settings: 
      { strict: false,
        base: [Object],
        replaceOnPUT: false,
        relations: [Object],
        acls: [Object] },
     relations: [],
     properties: 
      { id: [Object],
        ttl: [Object],
        created: [Object],
        userId: [Object] },
     _ids: null,
     json: null },
  settings: 
   { strict: false,
     base: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        patchOrCreateWithWhere: [Object],
        upsertWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        replaceById: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db' },
     replaceOnPUT: false,
     relations: { user: [Object] },
     acls: [ [Object], [Object] ] },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'AccessToken',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/AccessTokens' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'AccessToken.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  ANONYMOUS: 
   { id: '$anonymous',
     created: 2016-12-03T22:59:23.764Z,
     ttl: 1209600 },
  createAccessTokenId: [Function],
  findForRequest: [Function],
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  _scopeMeta: {},
  shared: false,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Circular],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Circular],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Circular],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-03 23:59:30.310] [TRACE] metadata - entering buildMetadata
[2016-12-03 23:59:30.503] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'ACL',
     rawProperties: 
      { model: [Object],
        property: [Object],
        accessType: 'string',
        permission: 'string',
        principalType: 'string',
        principalId: 'string',
        id: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     relations: [],
     properties: 
      { model: [Object],
        property: [Object],
        accessType: [Object],
        permission: [Object],
        principalType: [Object],
        principalId: [Object],
        id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        patchOrCreateWithWhere: [Object],
        upsertWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        replaceById: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db' },
     replaceOnPUT: false },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'ACL',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/ACLs' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'ACL.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  ALL: '*',
  DEFAULT: 'DEFAULT',
  ALLOW: 'ALLOW',
  ALARM: 'ALARM',
  AUDIT: 'AUDIT',
  DENY: 'DENY',
  READ: 'READ',
  REPLICATE: 'REPLICATE',
  WRITE: 'WRITE',
  EXECUTE: 'EXECUTE',
  USER: 'USER',
  APPLICATION: 'APP',
  APP: 'APP',
  ROLE: 'ROLE',
  SCOPE: 'SCOPE',
  getMatchingScore: [Function: getMatchingScore],
  resolvePermission: [Function: resolvePermission],
  getStaticACLs: [Function: getStaticACLs],
  checkPermission: [Function: checkPermission],
  checkAccessForContext: [Function],
  checkAccessForToken: [Function],
  resolveRelatedModels: [Function],
  resolvePrincipal: [Function],
  isMappedToRole: [Function],
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  shared: false,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Circular],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Circular],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Circular],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-03 23:59:31.231] [TRACE] metadata - metadata xml build
[2016-12-03 23:59:30.540] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'RoleMapping',
     rawProperties: 
      { id: [Object],
        principalType: [Object],
        principalId: [Object],
        roleId: [Object] },
     settings: 
      { strict: false,
        base: [Object],
        replaceOnPUT: false,
        description: 'Map principals to roles',
        relations: [Object] },
     relations: [],
     properties: 
      { id: [Object],
        principalType: [Object],
        principalId: [Object],
        roleId: [Object] },
     _ids: null,
     json: null },
  settings: 
   { strict: false,
     base: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        patchOrCreateWithWhere: [Object],
        upsertWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        replaceById: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db' },
     replaceOnPUT: false,
     description: 'Map principals to roles',
     relations: { role: [Object] } },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'RoleMapping',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/RoleMappings' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'RoleMapping.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  USER: 'USER',
  APPLICATION: 'APP',
  APP: 'APP',
  ROLE: 'ROLE',
  resolveRelatedModels: [Function],
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  shared: false,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Circular],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Circular],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Circular],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true },
  _scopeMeta: {} }
[2016-12-03 23:59:30.578] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'Role',
     rawProperties: 
      { id: [Object],
        name: [Object],
        description: 'string',
        created: 'date',
        modified: 'date' },
     settings: 
      { strict: false,
        base: [Object],
        replaceOnPUT: false,
        relations: [Object] },
     relations: [],
     properties: 
      { id: [Object],
        name: [Object],
        description: [Object],
        created: [Object],
        modified: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        patchOrCreateWithWhere: [Object],
        upsertWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        replaceById: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db' },
     replaceOnPUT: false,
     relations: { principals: [Object] } },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'Role',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Roles' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'Role.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  resolveRelatedModels: [Function],
  OWNER: '$owner',
  RELATED: '$related',
  AUTHENTICATED: '$authenticated',
  UNAUTHENTICATED: '$unauthenticated',
  EVERYONE: '$everyone',
  registerResolver: [Function],
  resolvers: 
   { '$owner': [Function],
     '$authenticated': [Function],
     '$unauthenticated': [Function],
     '$everyone': [Function] },
  isOwner: [Function: isOwner],
  isAuthenticated: [Function: isAuthenticated],
  isInRole: [Function],
  getRoles: [Function],
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  scopes: 
   { principals: 
      ScopeDefinition {
        isStatic: false,
        modelFrom: [Object],
        modelTo: [Object],
        name: 'principals',
        params: [Function],
        methods: [Object],
        options: {} } },
  shared: false,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Circular],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Circular],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Circular],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-03 23:59:30.644] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'Kunde',
     rawProperties: { name: [Object], status: [Object], id: [Object] },
     settings: 
      { strict: false,
        base: 'PersistedModel',
        replaceOnPUT: false,
        validateUpsert: true,
        plural: 'Kunden',
        idInjection: true,
        validations: [],
        relations: {},
        acls: [Object],
        methods: {} },
     relations: [],
     properties: { name: [Object], status: [Object], id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 'PersistedModel',
     replaceOnPUT: false,
     validateUpsert: true,
     plural: 'Kunden',
     idInjection: true,
     validations: [],
     relations: {},
     acls: [ [Object], [Object], [Object], [Object] ],
     methods: {} },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'Kunde',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Kunden', verb: 'all' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'Kunde.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  shared: true,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Circular],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Circular],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-03 23:59:30.674] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'Standort',
     rawProperties: 
      { name: [Object],
        ort: [Object],
        plz: [Object],
        strasse: [Object],
        telefon1: [Object],
        telefon2: [Object],
        bemerkung: [Object],
        id: [Object] },
     settings: 
      { strict: false,
        base: 'PersistedModel',
        replaceOnPUT: false,
        validateUpsert: true,
        plural: 'Standorte',
        idInjection: true,
        validations: [],
        relations: {},
        acls: [Object],
        methods: {} },
     relations: [],
     properties: 
      { name: [Object],
        ort: [Object],
        plz: [Object],
        strasse: [Object],
        telefon1: [Object],
        telefon2: [Object],
        bemerkung: [Object],
        id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 'PersistedModel',
     replaceOnPUT: false,
     validateUpsert: true,
     plural: 'Standorte',
     idInjection: true,
     validations: [],
     relations: {},
     acls: [ [Object], [Object], [Object], [Object] ],
     methods: {} },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'Standort',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Standorte', verb: 'all' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'Standort.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  shared: true,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Circular],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Circular],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-03 23:59:30.700] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'Raum',
     rawProperties: 
      { name: [Object],
        von: [Object],
        bemerkung: [Object],
        id: [Object] },
     settings: 
      { strict: false,
        base: 'PersistedModel',
        replaceOnPUT: false,
        validateUpsert: true,
        plural: 'Raeume',
        idInjection: true,
        validations: [],
        relations: {},
        acls: [Object],
        methods: {} },
     relations: [],
     properties: 
      { name: [Object],
        von: [Object],
        bemerkung: [Object],
        id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 'PersistedModel',
     replaceOnPUT: false,
     validateUpsert: true,
     plural: 'Raeume',
     idInjection: true,
     validations: [],
     relations: {},
     acls: [ [Object], [Object], [Object], [Object] ],
     methods: {} },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'Raum',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Raeume', verb: 'all' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'Raum.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  shared: true,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Circular],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Circular],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-03 23:59:30.735] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'Schulung',
     rawProperties: 
      { name: [Object],
        version: [Object],
        beschreibung: [Object],
        start: [Object],
        ende: [Object],
        status: [Object],
        id: [Object] },
     settings: 
      { strict: false,
        base: 'PersistedModel',
        replaceOnPUT: false,
        validateUpsert: true,
        plural: 'Schulungen',
        idInjection: true,
        validations: [],
        relations: {},
        acls: [Object],
        methods: {} },
     relations: [],
     properties: 
      { name: [Object],
        version: [Object],
        beschreibung: [Object],
        start: [Object],
        ende: [Object],
        status: [Object],
        id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 'PersistedModel',
     replaceOnPUT: false,
     validateUpsert: true,
     plural: 'Schulungen',
     idInjection: true,
     validations: [],
     relations: {},
     acls: [ [Object], [Object], [Object], [Object] ],
     methods: {} },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'Schulung',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Schulungen', verb: 'all' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'Schulung.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  shared: true,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Circular],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Circular],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-03 23:59:30.765] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'Kursinhalt',
     rawProperties: 
      { name: [Object],
        beschreibung: [Object],
        unterlagen: [Object],
        termin: [Object],
        status: [Object],
        id: [Object] },
     settings: 
      { strict: false,
        base: 'PersistedModel',
        replaceOnPUT: false,
        validateUpsert: true,
        plural: 'Kursinhalte',
        idInjection: true,
        validations: [],
        relations: {},
        acls: [Object],
        methods: {} },
     relations: [],
     properties: 
      { name: [Object],
        beschreibung: [Object],
        unterlagen: [Object],
        termin: [Object],
        status: [Object],
        id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 'PersistedModel',
     replaceOnPUT: false,
     validateUpsert: true,
     plural: 'Kursinhalte',
     idInjection: true,
     validations: [],
     relations: {},
     acls: [ [Object], [Object], [Object], [Object] ],
     methods: {} },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'Kursinhalt',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Kursinhalte', verb: 'all' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'Kursinhalt.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  shared: true,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Circular],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Circular],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-03 23:59:30.796] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        patchOrCreateWithWhere: [Object],
        upsertWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        replaceById: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db' },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: { email: [Function], password: [Function] },
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'User',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: 
      { strict: false,
        base: [Object],
        replaceOnPUT: false,
        caseSensitiveEmail: true,
        hidden: [Object],
        acls: [Object],
        relations: [Object],
        maxTTL: 31556926,
        ttl: 1209600 },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'User',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: [Function],
     patchOrCreate: [Function],
     updateOrCreate: [Function],
     upsert: [Function],
     patchOrCreateWithWhere: [Function],
     upsertWithWhere: [Function],
     replaceOrCreate: [Function: replaceOrCreate],
     findOrCreate: [Function: findOrCreate],
     exists: [Function: exists],
     findById: [Function: findById],
     find: [Function: find],
     findOne: [Function: findOne],
     destroyAll: [Function: destroyAll],
     remove: [Function: destroyAll],
     deleteAll: [Function: destroyAll],
     updateAll: [Function],
     update: [Function],
     destroyById: [Function: deleteById],
     removeById: [Function: deleteById],
     deleteById: [Function: deleteById],
     count: [Function],
     replaceById: [Function],
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     normalizeCredentials: [Function],
     login: [Function],
     logout: [Function],
     generateVerificationToken: [Function],
     confirm: [Function],
     resetPassword: [Function],
     hashPassword: [Function],
     validatePassword: [Function],
     email: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        send: [Function],
        autoAttach: 'mail' },
     accessToken: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Function],
        patchOrCreate: [Function],
        updateOrCreate: [Function],
        upsert: [Function],
        patchOrCreateWithWhere: [Function],
        upsertWithWhere: [Function],
        replaceOrCreate: [Function: replaceOrCreate],
        findOrCreate: [Function: findOrCreate],
        exists: [Function: exists],
        findById: [Function: findById],
        find: [Function: find],
        findOne: [Function: findOne],
        destroyAll: [Function: destroyAll],
        remove: [Function: destroyAll],
        deleteAll: [Function: destroyAll],
        updateAll: [Function],
        update: [Function],
        destroyById: [Function: deleteById],
        removeById: [Function: deleteById],
        deleteById: [Function: deleteById],
        count: [Function],
        replaceById: [Function],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        ANONYMOUS: [Object],
        createAccessTokenId: [Function],
        findForRequest: [Function],
        autoAttach: 'db',
        _mixins: [Object],
        _forDB: [Function],
        defaultScope: [Function],
        applyScope: [Function],
        applyProperties: [Function],
        lookupModel: [Function],
        getConnector: [Function],
        findByIds: [Function],
        all: [Function],
        _getSetting: [Function],
        _normalize: [Function],
        _coerce: [Function],
        scope: [Function],
        normalizeInclude: [Function: normalizeInclude],
        include: [Function],
        hasMany: [Function: hasMany],
        belongsTo: [Function],
        hasAndBelongsToMany: [Function: hasAndBelongsToMany],
        hasOne: [Function: hasOne],
        referencesMany: [Function: referencesMany],
        embedsOne: [Function: embedsOne],
        embedsMany: [Function: embedsMany],
        beginTransaction: [Function],
        Transaction: [Object],
        _scopeMeta: {},
        shared: false,
        app: [Object] },
     autoAttach: 'db',
     _mixins: [ [Object], [Object], [Object], [Object] ],
     _forDB: [Function],
     defaultScope: [Function],
     applyScope: [Function],
     applyProperties: [Function],
     lookupModel: [Function],
     getConnector: [Function],
     findByIds: [Function],
     all: [Function],
     _getSetting: [Function],
     _normalize: [Function],
     _coerce: [Function],
     scope: [Function],
     normalizeInclude: [Function: normalizeInclude],
     include: [Function],
     hasMany: [Function: hasMany],
     belongsTo: [Function],
     hasAndBelongsToMany: [Function: hasAndBelongsToMany],
     hasOne: [Function: hasOne],
     referencesMany: [Function: referencesMany],
     embedsOne: [Function: embedsOne],
     embedsMany: [Function: embedsMany],
     beginTransaction: [Function],
     Transaction: 
      { [Function: Transaction]
        super_: [Object],
        SERIALIZABLE: 'SERIALIZABLE',
        REPEATABLE_READ: 'REPEATABLE READ',
        READ_COMMITTED: 'READ COMMITTED',
        READ_UNCOMMITTED: 'READ UNCOMMITTED',
        hookTypes: [Object],
        begin: [Function] },
     shared: true,
     app: 
      { [Function: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 3,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        enableAuth: [Function],
        dataSources: [Object],
        datasources: [Object],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Object],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Object],
        _skipLayerSorting: false,
        isAuthEnabled: true },
     scopes: { accessTokens: [Object] } },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: { email: [Function], password: [Function] },
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'Dozent',
     rawProperties: 
      { von: [Object],
        bis: [Object],
        realm: [Object],
        username: [Object],
        password: [Object],
        credentials: [Object],
        challenges: [Object],
        email: [Object],
        emailVerified: [Object],
        verificationToken: [Object],
        status: [Object],
        created: [Object],
        lastUpdated: [Object],
        id: [Object] },
     settings: 
      { strict: false,
        base: 'User',
        replaceOnPUT: false,
        caseSensitiveEmail: true,
        hidden: [Object],
        acls: [Object],
        relations: [Object],
        maxTTL: 31556926,
        ttl: 1209600,
        validateUpsert: true,
        plural: 'Dozenten',
        idInjection: true,
        validations: [],
        methods: {} },
     relations: [],
     properties: 
      { von: [Object],
        bis: [Object],
        realm: [Object],
        username: [Object],
        password: [Object],
        credentials: [Object],
        challenges: [Object],
        email: [Object],
        emailVerified: [Object],
        verificationToken: [Object],
        status: [Object],
        created: [Object],
        lastUpdated: [Object],
        id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 'User',
     replaceOnPUT: false,
     caseSensitiveEmail: true,
     hidden: [ 'password', 'verificationToken' ],
     acls: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     relations: { accessTokens: [Object] },
     maxTTL: 31556926,
     ttl: 1209600,
     validateUpsert: true,
     plural: 'Dozenten',
     idInjection: true,
     validations: [],
     methods: {} },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'Dozent',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Dozenten', verb: 'all' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'Dozent.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  normalizeCredentials: [Function],
  login: [Function],
  logout: [Function],
  generateVerificationToken: [Function],
  confirm: [Function],
  resetPassword: [Function],
  hashPassword: [Function],
  validatePassword: [Function],
  email: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'Email',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: 'Model' },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'Email',
        ctor: [Circular],
        _methods: [],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     send: [Function],
     autoAttach: 'mail' },
  accessToken: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        patchOrCreateWithWhere: [Object],
        upsertWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        replaceById: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db' },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'AccessToken',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: null,
        json: null },
     settings: 
      { strict: false,
        base: [Object],
        replaceOnPUT: false,
        relations: [Object],
        acls: [Object] },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'AccessToken',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: [Function],
     patchOrCreate: [Function],
     updateOrCreate: [Function],
     upsert: [Function],
     patchOrCreateWithWhere: [Function],
     upsertWithWhere: [Function],
     replaceOrCreate: [Function: replaceOrCreate],
     findOrCreate: [Function: findOrCreate],
     exists: [Function: exists],
     findById: [Function: findById],
     find: [Function: find],
     findOne: [Function: findOne],
     destroyAll: [Function: destroyAll],
     remove: [Function: destroyAll],
     deleteAll: [Function: destroyAll],
     updateAll: [Function],
     update: [Function],
     destroyById: [Function: deleteById],
     removeById: [Function: deleteById],
     deleteById: [Function: deleteById],
     count: [Function],
     replaceById: [Function],
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     ANONYMOUS: 
      { id: '$anonymous',
        created: 2016-12-03T22:59:23.764Z,
        ttl: 1209600 },
     createAccessTokenId: [Function],
     findForRequest: [Function],
     autoAttach: 'db',
     _mixins: [ [Object], [Object], [Object], [Object] ],
     _forDB: [Function],
     defaultScope: [Function],
     applyScope: [Function],
     applyProperties: [Function],
     lookupModel: [Function],
     getConnector: [Function],
     findByIds: [Function],
     all: [Function],
     _getSetting: [Function],
     _normalize: [Function],
     _coerce: [Function],
     scope: [Function],
     normalizeInclude: [Function: normalizeInclude],
     include: [Function],
     hasMany: [Function: hasMany],
     belongsTo: [Function],
     hasAndBelongsToMany: [Function: hasAndBelongsToMany],
     hasOne: [Function: hasOne],
     referencesMany: [Function: referencesMany],
     embedsOne: [Function: embedsOne],
     embedsMany: [Function: embedsMany],
     beginTransaction: [Function],
     Transaction: 
      { [Function: Transaction]
        super_: [Object],
        SERIALIZABLE: 'SERIALIZABLE',
        REPEATABLE_READ: 'REPEATABLE READ',
        READ_COMMITTED: 'READ COMMITTED',
        READ_UNCOMMITTED: 'READ UNCOMMITTED',
        hookTypes: [Object],
        begin: [Function] },
     _scopeMeta: {},
     shared: false,
     app: 
      { [Function: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 3,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        enableAuth: [Function],
        dataSources: [Object],
        datasources: [Object],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Object],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Object],
        _skipLayerSorting: false,
        isAuthEnabled: true } },
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  scopes: 
   { accessTokens: 
      ScopeDefinition {
        isStatic: false,
        modelFrom: [Object],
        modelTo: [Object],
        name: 'accessTokens',
        params: [Function],
        methods: [Object],
        options: [Object] } },
  shared: true,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Circular],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Circular],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-03 23:59:30.876] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        patchOrCreateWithWhere: [Object],
        upsertWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        replaceById: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db' },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: { email: [Function], password: [Function] },
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'User',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: 
      { strict: false,
        base: [Object],
        replaceOnPUT: false,
        caseSensitiveEmail: true,
        hidden: [Object],
        acls: [Object],
        relations: [Object],
        maxTTL: 31556926,
        ttl: 1209600 },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'User',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: [Function],
     patchOrCreate: [Function],
     updateOrCreate: [Function],
     upsert: [Function],
     patchOrCreateWithWhere: [Function],
     upsertWithWhere: [Function],
     replaceOrCreate: [Function: replaceOrCreate],
     findOrCreate: [Function: findOrCreate],
     exists: [Function: exists],
     findById: [Function: findById],
     find: [Function: find],
     findOne: [Function: findOne],
     destroyAll: [Function: destroyAll],
     remove: [Function: destroyAll],
     deleteAll: [Function: destroyAll],
     updateAll: [Function],
     update: [Function],
     destroyById: [Function: deleteById],
     removeById: [Function: deleteById],
     deleteById: [Function: deleteById],
     count: [Function],
     replaceById: [Function],
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     normalizeCredentials: [Function],
     login: [Function],
     logout: [Function],
     generateVerificationToken: [Function],
     confirm: [Function],
     resetPassword: [Function],
     hashPassword: [Function],
     validatePassword: [Function],
     email: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        send: [Function],
        autoAttach: 'mail' },
     accessToken: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Function],
        patchOrCreate: [Function],
        updateOrCreate: [Function],
        upsert: [Function],
        patchOrCreateWithWhere: [Function],
        upsertWithWhere: [Function],
        replaceOrCreate: [Function: replaceOrCreate],
        findOrCreate: [Function: findOrCreate],
        exists: [Function: exists],
        findById: [Function: findById],
        find: [Function: find],
        findOne: [Function: findOne],
        destroyAll: [Function: destroyAll],
        remove: [Function: destroyAll],
        deleteAll: [Function: destroyAll],
        updateAll: [Function],
        update: [Function],
        destroyById: [Function: deleteById],
        removeById: [Function: deleteById],
        deleteById: [Function: deleteById],
        count: [Function],
        replaceById: [Function],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        ANONYMOUS: [Object],
        createAccessTokenId: [Function],
        findForRequest: [Function],
        autoAttach: 'db',
        _mixins: [Object],
        _forDB: [Function],
        defaultScope: [Function],
        applyScope: [Function],
        applyProperties: [Function],
        lookupModel: [Function],
        getConnector: [Function],
        findByIds: [Function],
        all: [Function],
        _getSetting: [Function],
        _normalize: [Function],
        _coerce: [Function],
        scope: [Function],
        normalizeInclude: [Function: normalizeInclude],
        include: [Function],
        hasMany: [Function: hasMany],
        belongsTo: [Function],
        hasAndBelongsToMany: [Function: hasAndBelongsToMany],
        hasOne: [Function: hasOne],
        referencesMany: [Function: referencesMany],
        embedsOne: [Function: embedsOne],
        embedsMany: [Function: embedsMany],
        beginTransaction: [Function],
        Transaction: [Object],
        _scopeMeta: {},
        shared: false,
        app: [Object] },
     autoAttach: 'db',
     _mixins: [ [Object], [Object], [Object], [Object] ],
     _forDB: [Function],
     defaultScope: [Function],
     applyScope: [Function],
     applyProperties: [Function],
     lookupModel: [Function],
     getConnector: [Function],
     findByIds: [Function],
     all: [Function],
     _getSetting: [Function],
     _normalize: [Function],
     _coerce: [Function],
     scope: [Function],
     normalizeInclude: [Function: normalizeInclude],
     include: [Function],
     hasMany: [Function: hasMany],
     belongsTo: [Function],
     hasAndBelongsToMany: [Function: hasAndBelongsToMany],
     hasOne: [Function: hasOne],
     referencesMany: [Function: referencesMany],
     embedsOne: [Function: embedsOne],
     embedsMany: [Function: embedsMany],
     beginTransaction: [Function],
     Transaction: 
      { [Function: Transaction]
        super_: [Object],
        SERIALIZABLE: 'SERIALIZABLE',
        REPEATABLE_READ: 'REPEATABLE READ',
        READ_COMMITTED: 'READ COMMITTED',
        READ_UNCOMMITTED: 'READ UNCOMMITTED',
        hookTypes: [Object],
        begin: [Function] },
     shared: true,
     app: 
      { [Function: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 3,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        enableAuth: [Function],
        dataSources: [Object],
        datasources: [Object],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Object],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Object],
        _skipLayerSorting: false,
        isAuthEnabled: true },
     scopes: { accessTokens: [Object] } },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: { email: [Function], password: [Function] },
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'Teilnehmer',
     rawProperties: 
      { von: [Object],
        bis: [Object],
        realm: [Object],
        username: [Object],
        password: [Object],
        credentials: [Object],
        challenges: [Object],
        email: [Object],
        emailVerified: [Object],
        verificationToken: [Object],
        status: [Object],
        created: [Object],
        lastUpdated: [Object],
        id: [Object] },
     settings: 
      { strict: false,
        base: 'User',
        replaceOnPUT: false,
        caseSensitiveEmail: true,
        hidden: [Object],
        acls: [Object],
        relations: [Object],
        maxTTL: 31556926,
        ttl: 1209600,
        validateUpsert: true,
        plural: 'Teilnehmer',
        idInjection: true,
        validations: [],
        methods: {} },
     relations: [],
     properties: 
      { von: [Object],
        bis: [Object],
        realm: [Object],
        username: [Object],
        password: [Object],
        credentials: [Object],
        challenges: [Object],
        email: [Object],
        emailVerified: [Object],
        verificationToken: [Object],
        status: [Object],
        created: [Object],
        lastUpdated: [Object],
        id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 'User',
     replaceOnPUT: false,
     caseSensitiveEmail: true,
     hidden: [ 'password', 'verificationToken' ],
     acls: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     relations: { accessTokens: [Object] },
     maxTTL: 31556926,
     ttl: 1209600,
     validateUpsert: true,
     plural: 'Teilnehmer',
     idInjection: true,
     validations: [],
     methods: {} },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'Teilnehmer',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Teilnehmer', verb: 'all' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'Teilnehmer.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  normalizeCredentials: [Function],
  login: [Function],
  logout: [Function],
  generateVerificationToken: [Function],
  confirm: [Function],
  resetPassword: [Function],
  hashPassword: [Function],
  validatePassword: [Function],
  email: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'Email',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: 'Model' },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'Email',
        ctor: [Circular],
        _methods: [],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     send: [Function],
     autoAttach: 'mail' },
  accessToken: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        patchOrCreateWithWhere: [Object],
        upsertWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        replaceById: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db' },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'AccessToken',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: null,
        json: null },
     settings: 
      { strict: false,
        base: [Object],
        replaceOnPUT: false,
        relations: [Object],
        acls: [Object] },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'AccessToken',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: [Function],
     patchOrCreate: [Function],
     updateOrCreate: [Function],
     upsert: [Function],
     patchOrCreateWithWhere: [Function],
     upsertWithWhere: [Function],
     replaceOrCreate: [Function: replaceOrCreate],
     findOrCreate: [Function: findOrCreate],
     exists: [Function: exists],
     findById: [Function: findById],
     find: [Function: find],
     findOne: [Function: findOne],
     destroyAll: [Function: destroyAll],
     remove: [Function: destroyAll],
     deleteAll: [Function: destroyAll],
     updateAll: [Function],
     update: [Function],
     destroyById: [Function: deleteById],
     removeById: [Function: deleteById],
     deleteById: [Function: deleteById],
     count: [Function],
     replaceById: [Function],
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     ANONYMOUS: 
      { id: '$anonymous',
        created: 2016-12-03T22:59:23.764Z,
        ttl: 1209600 },
     createAccessTokenId: [Function],
     findForRequest: [Function],
     autoAttach: 'db',
     _mixins: [ [Object], [Object], [Object], [Object] ],
     _forDB: [Function],
     defaultScope: [Function],
     applyScope: [Function],
     applyProperties: [Function],
     lookupModel: [Function],
     getConnector: [Function],
     findByIds: [Function],
     all: [Function],
     _getSetting: [Function],
     _normalize: [Function],
     _coerce: [Function],
     scope: [Function],
     normalizeInclude: [Function: normalizeInclude],
     include: [Function],
     hasMany: [Function: hasMany],
     belongsTo: [Function],
     hasAndBelongsToMany: [Function: hasAndBelongsToMany],
     hasOne: [Function: hasOne],
     referencesMany: [Function: referencesMany],
     embedsOne: [Function: embedsOne],
     embedsMany: [Function: embedsMany],
     beginTransaction: [Function],
     Transaction: 
      { [Function: Transaction]
        super_: [Object],
        SERIALIZABLE: 'SERIALIZABLE',
        REPEATABLE_READ: 'REPEATABLE READ',
        READ_COMMITTED: 'READ COMMITTED',
        READ_UNCOMMITTED: 'READ UNCOMMITTED',
        hookTypes: [Object],
        begin: [Function] },
     _scopeMeta: {},
     shared: false,
     app: 
      { [Function: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 3,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        enableAuth: [Function],
        dataSources: [Object],
        datasources: [Object],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Object],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Object],
        _skipLayerSorting: false,
        isAuthEnabled: true } },
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  scopes: 
   { accessTokens: 
      ScopeDefinition {
        isStatic: false,
        modelFrom: [Object],
        modelTo: [Object],
        name: 'accessTokens',
        params: [Function],
        methods: [Object],
        options: [Object] } },
  shared: true,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Circular],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Circular],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-03 23:59:31.114] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'Teilnehmergruppe',
     rawProperties: { name: [Object], id: [Object] },
     settings: 
      { strict: false,
        base: 'PersistedModel',
        replaceOnPUT: false,
        validateUpsert: true,
        plural: 'Teilnehmergruppen',
        idInjection: true,
        validations: [],
        relations: {},
        acls: [Object],
        methods: {} },
     relations: [],
     properties: { name: [Object], id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 'PersistedModel',
     replaceOnPUT: false,
     validateUpsert: true,
     plural: 'Teilnehmergruppen',
     idInjection: true,
     validations: [],
     relations: {},
     acls: [ [Object], [Object], [Object], [Object] ],
     methods: {} },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'Teilnehmergruppe',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Teilnehmergruppen', verb: 'all' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'Teilnehmergruppe.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  shared: true,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Circular],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Circular],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-03 23:59:31.141] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'Kurs',
     rawProperties: 
      { name: [Object],
        beschreibung: [Object],
        dauer: [Object],
        status: [Object],
        id: [Object] },
     settings: 
      { strict: false,
        base: 'PersistedModel',
        replaceOnPUT: false,
        validateUpsert: true,
        plural: 'Kurse',
        idInjection: true,
        validations: [],
        relations: {},
        acls: [Object],
        methods: {} },
     relations: [],
     properties: 
      { name: [Object],
        beschreibung: [Object],
        dauer: [Object],
        status: [Object],
        id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 'PersistedModel',
     replaceOnPUT: false,
     validateUpsert: true,
     plural: 'Kurse',
     idInjection: true,
     validations: [],
     relations: {},
     acls: [ [Object], [Object], [Object], [Object] ],
     methods: {} },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'Kurs',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Kurse', verb: 'all' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'Kurs.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  shared: true,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Circular],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Circular],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-03 23:59:31.171] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'Kurstermin',
     rawProperties: { von: [Object], bis: [Object], status: [Object], id: [Object] },
     settings: 
      { strict: false,
        base: 'PersistedModel',
        replaceOnPUT: false,
        validateUpsert: true,
        plural: 'Kurstermine',
        idInjection: true,
        validations: [],
        relations: {},
        acls: [Object],
        methods: {} },
     relations: [],
     properties: { von: [Object], bis: [Object], status: [Object], id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 'PersistedModel',
     replaceOnPUT: false,
     validateUpsert: true,
     plural: 'Kurstermine',
     idInjection: true,
     validations: [],
     relations: {},
     acls: [ [Object], [Object], [Object], [Object] ],
     methods: {} },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'Kurstermin',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Kurstermine', verb: 'all' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'Kurstermin.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  shared: true,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Circular] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Circular] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-03 23:59:31.395] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:59:31.395] [DEBUG] odata - baseUrl = /odata/Kunden/$count
[2016-12-03 23:59:31.426] [INFO] odata - processing OData V2 request of type GET
[2016-12-03 23:59:31.430] [INFO] console - filter: {"limit":"2","skip":"0"}
[2016-12-03 23:59:31.427] [DEBUG] odata - baseUrl = /odata/Kunden
[2016-12-04 00:00:21.977] [INFO] odata - processing OData V2 request of type GET
[2016-12-04 00:00:21.978] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: { email: [Function], password: [Function] },
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'User',
     rawProperties: 
      { realm: [Object],
        username: [Object],
        password: [Object],
        credentials: [Object],
        challenges: [Object],
        email: [Object],
        emailVerified: 'boolean',
        verificationToken: 'string',
        status: 'string',
        created: 'date',
        lastUpdated: 'date',
        id: [Object] },
     settings: 
      { strict: false,
        base: [Object],
        replaceOnPUT: false,
        caseSensitiveEmail: true,
        hidden: [Object],
        acls: [Object],
        relations: [Object],
        maxTTL: 31556926,
        ttl: 1209600 },
     relations: [],
     properties: 
      { realm: [Object],
        username: [Object],
        password: [Object],
        credentials: [Object],
        challenges: [Object],
        email: [Object],
        emailVerified: [Object],
        verificationToken: [Object],
        status: [Object],
        created: [Object],
        lastUpdated: [Object],
        id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        patchOrCreateWithWhere: [Object],
        upsertWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        replaceById: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db' },
     replaceOnPUT: false,
     caseSensitiveEmail: true,
     hidden: [ 'password', 'verificationToken' ],
     acls: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     relations: { accessTokens: [Object] },
     maxTTL: 31556926,
     ttl: 1209600 },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'User',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Users', verb: 'all' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'User.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  normalizeCredentials: [Function],
  login: [Function],
  logout: [Function],
  generateVerificationToken: [Function],
  confirm: [Function],
  resetPassword: [Function],
  hashPassword: [Function],
  validatePassword: [Function],
  email: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'Email',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: 'Model' },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'Email',
        ctor: [Circular],
        _methods: [],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     send: [Function],
     autoAttach: 'mail' },
  accessToken: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        patchOrCreateWithWhere: [Object],
        upsertWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        replaceById: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db' },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'AccessToken',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: null,
        json: null },
     settings: 
      { strict: false,
        base: [Object],
        replaceOnPUT: false,
        relations: [Object],
        acls: [Object] },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'AccessToken',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: [Function],
     patchOrCreate: [Function],
     updateOrCreate: [Function],
     upsert: [Function],
     patchOrCreateWithWhere: [Function],
     upsertWithWhere: [Function],
     replaceOrCreate: [Function: replaceOrCreate],
     findOrCreate: [Function: findOrCreate],
     exists: [Function: exists],
     findById: [Function: findById],
     find: [Function: find],
     findOne: [Function: findOne],
     destroyAll: [Function: destroyAll],
     remove: [Function: destroyAll],
     deleteAll: [Function: destroyAll],
     updateAll: [Function],
     update: [Function],
     destroyById: [Function: deleteById],
     removeById: [Function: deleteById],
     deleteById: [Function: deleteById],
     count: [Function],
     replaceById: [Function],
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     ANONYMOUS: 
      { id: '$anonymous',
        created: 2016-12-03T22:59:23.764Z,
        ttl: 1209600 },
     createAccessTokenId: [Function],
     findForRequest: [Function],
     autoAttach: 'db',
     _mixins: [ [Object], [Object], [Object], [Object] ],
     _forDB: [Function],
     defaultScope: [Function],
     applyScope: [Function],
     applyProperties: [Function],
     lookupModel: [Function],
     getConnector: [Function],
     findByIds: [Function],
     all: [Function],
     _getSetting: [Function],
     _normalize: [Function],
     _coerce: [Function],
     scope: [Function],
     normalizeInclude: [Function: normalizeInclude],
     include: [Function],
     hasMany: [Function: hasMany],
     belongsTo: [Function],
     hasAndBelongsToMany: [Function: hasAndBelongsToMany],
     hasOne: [Function: hasOne],
     referencesMany: [Function: referencesMany],
     embedsOne: [Function: embedsOne],
     embedsMany: [Function: embedsMany],
     beginTransaction: [Function],
     Transaction: 
      { [Function: Transaction]
        super_: [Object],
        SERIALIZABLE: 'SERIALIZABLE',
        REPEATABLE_READ: 'REPEATABLE READ',
        READ_COMMITTED: 'READ COMMITTED',
        READ_UNCOMMITTED: 'READ UNCOMMITTED',
        hookTypes: [Object],
        begin: [Function] },
     _scopeMeta: {},
     shared: false,
     app: 
      { [Function: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 3,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        enableAuth: [Function],
        dataSources: [Object],
        datasources: [Object],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Object],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Object],
        _skipLayerSorting: false,
        isAuthEnabled: true } },
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  shared: true,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Circular],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Circular],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Circular],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true },
  scopes: 
   { accessTokens: 
      ScopeDefinition {
        isStatic: false,
        modelFrom: [Object],
        modelTo: [Object],
        name: 'accessTokens',
        params: [Function],
        methods: [Object],
        options: [Object] } } }
[2016-12-04 00:00:21.978] [DEBUG] odata - baseUrl = /odata/$metadata
[2016-12-04 00:00:22.054] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'AccessToken',
     rawProperties: 
      { id: [Object],
        ttl: [Object],
        created: [Object],
        userId: [Object] },
     settings: 
      { strict: false,
        base: [Object],
        replaceOnPUT: false,
        relations: [Object],
        acls: [Object] },
     relations: [],
     properties: 
      { id: [Object],
        ttl: [Object],
        created: [Object],
        userId: [Object] },
     _ids: null,
     json: null },
  settings: 
   { strict: false,
     base: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        patchOrCreateWithWhere: [Object],
        upsertWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        replaceById: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db' },
     replaceOnPUT: false,
     relations: { user: [Object] },
     acls: [ [Object], [Object] ] },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'AccessToken',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/AccessTokens' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'AccessToken.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  ANONYMOUS: 
   { id: '$anonymous',
     created: 2016-12-03T22:59:23.764Z,
     ttl: 1209600 },
  createAccessTokenId: [Function],
  findForRequest: [Function],
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  _scopeMeta: {},
  shared: false,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Circular],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Circular],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Circular],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-04 00:00:21.978] [TRACE] metadata - entering buildMetadata
[2016-12-04 00:00:22.142] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'ACL',
     rawProperties: 
      { model: [Object],
        property: [Object],
        accessType: 'string',
        permission: 'string',
        principalType: 'string',
        principalId: 'string',
        id: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     relations: [],
     properties: 
      { model: [Object],
        property: [Object],
        accessType: [Object],
        permission: [Object],
        principalType: [Object],
        principalId: [Object],
        id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        patchOrCreateWithWhere: [Object],
        upsertWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        replaceById: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db' },
     replaceOnPUT: false },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'ACL',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/ACLs' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'ACL.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  ALL: '*',
  DEFAULT: 'DEFAULT',
  ALLOW: 'ALLOW',
  ALARM: 'ALARM',
  AUDIT: 'AUDIT',
  DENY: 'DENY',
  READ: 'READ',
  REPLICATE: 'REPLICATE',
  WRITE: 'WRITE',
  EXECUTE: 'EXECUTE',
  USER: 'USER',
  APPLICATION: 'APP',
  APP: 'APP',
  ROLE: 'ROLE',
  SCOPE: 'SCOPE',
  getMatchingScore: [Function: getMatchingScore],
  resolvePermission: [Function: resolvePermission],
  getStaticACLs: [Function: getStaticACLs],
  checkPermission: [Function: checkPermission],
  checkAccessForContext: [Function],
  checkAccessForToken: [Function],
  resolveRelatedModels: [Function],
  resolvePrincipal: [Function],
  isMappedToRole: [Function],
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  shared: false,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Circular],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Circular],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Circular],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-04 00:00:22.667] [TRACE] metadata - metadata xml build
[2016-12-04 00:00:22.180] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'RoleMapping',
     rawProperties: 
      { id: [Object],
        principalType: [Object],
        principalId: [Object],
        roleId: [Object] },
     settings: 
      { strict: false,
        base: [Object],
        replaceOnPUT: false,
        description: 'Map principals to roles',
        relations: [Object] },
     relations: [],
     properties: 
      { id: [Object],
        principalType: [Object],
        principalId: [Object],
        roleId: [Object] },
     _ids: null,
     json: null },
  settings: 
   { strict: false,
     base: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        patchOrCreateWithWhere: [Object],
        upsertWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        replaceById: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db' },
     replaceOnPUT: false,
     description: 'Map principals to roles',
     relations: { role: [Object] } },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'RoleMapping',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/RoleMappings' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'RoleMapping.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  USER: 'USER',
  APPLICATION: 'APP',
  APP: 'APP',
  ROLE: 'ROLE',
  resolveRelatedModels: [Function],
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  shared: false,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Circular],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Circular],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Circular],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true },
  _scopeMeta: {} }
[2016-12-04 00:00:22.221] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'Role',
     rawProperties: 
      { id: [Object],
        name: [Object],
        description: 'string',
        created: 'date',
        modified: 'date' },
     settings: 
      { strict: false,
        base: [Object],
        replaceOnPUT: false,
        relations: [Object] },
     relations: [],
     properties: 
      { id: [Object],
        name: [Object],
        description: [Object],
        created: [Object],
        modified: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        patchOrCreateWithWhere: [Object],
        upsertWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        replaceById: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db' },
     replaceOnPUT: false,
     relations: { principals: [Object] } },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'Role',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Roles' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'Role.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  resolveRelatedModels: [Function],
  OWNER: '$owner',
  RELATED: '$related',
  AUTHENTICATED: '$authenticated',
  UNAUTHENTICATED: '$unauthenticated',
  EVERYONE: '$everyone',
  registerResolver: [Function],
  resolvers: 
   { '$owner': [Function],
     '$authenticated': [Function],
     '$unauthenticated': [Function],
     '$everyone': [Function] },
  isOwner: [Function: isOwner],
  isAuthenticated: [Function: isAuthenticated],
  isInRole: [Function],
  getRoles: [Function],
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  scopes: 
   { principals: 
      ScopeDefinition {
        isStatic: false,
        modelFrom: [Object],
        modelTo: [Object],
        name: 'principals',
        params: [Function],
        methods: [Object],
        options: {} } },
  shared: false,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Circular],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Circular],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Circular],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-04 00:00:22.261] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'Kunde',
     rawProperties: { name: [Object], status: [Object], id: [Object] },
     settings: 
      { strict: false,
        base: 'PersistedModel',
        replaceOnPUT: false,
        validateUpsert: true,
        plural: 'Kunden',
        idInjection: true,
        validations: [],
        relations: {},
        acls: [Object],
        methods: {} },
     relations: [],
     properties: { name: [Object], status: [Object], id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 'PersistedModel',
     replaceOnPUT: false,
     validateUpsert: true,
     plural: 'Kunden',
     idInjection: true,
     validations: [],
     relations: {},
     acls: [ [Object], [Object], [Object], [Object] ],
     methods: {} },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'Kunde',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Kunden', verb: 'all' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'Kunde.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  shared: true,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Circular],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Circular],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-04 00:00:22.291] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'Standort',
     rawProperties: 
      { name: [Object],
        ort: [Object],
        plz: [Object],
        strasse: [Object],
        telefon1: [Object],
        telefon2: [Object],
        bemerkung: [Object],
        id: [Object] },
     settings: 
      { strict: false,
        base: 'PersistedModel',
        replaceOnPUT: false,
        validateUpsert: true,
        plural: 'Standorte',
        idInjection: true,
        validations: [],
        relations: {},
        acls: [Object],
        methods: {} },
     relations: [],
     properties: 
      { name: [Object],
        ort: [Object],
        plz: [Object],
        strasse: [Object],
        telefon1: [Object],
        telefon2: [Object],
        bemerkung: [Object],
        id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 'PersistedModel',
     replaceOnPUT: false,
     validateUpsert: true,
     plural: 'Standorte',
     idInjection: true,
     validations: [],
     relations: {},
     acls: [ [Object], [Object], [Object], [Object] ],
     methods: {} },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'Standort',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Standorte', verb: 'all' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'Standort.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  shared: true,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Circular],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Circular],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-04 00:00:22.319] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'Raum',
     rawProperties: 
      { name: [Object],
        von: [Object],
        bemerkung: [Object],
        id: [Object] },
     settings: 
      { strict: false,
        base: 'PersistedModel',
        replaceOnPUT: false,
        validateUpsert: true,
        plural: 'Raeume',
        idInjection: true,
        validations: [],
        relations: {},
        acls: [Object],
        methods: {} },
     relations: [],
     properties: 
      { name: [Object],
        von: [Object],
        bemerkung: [Object],
        id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 'PersistedModel',
     replaceOnPUT: false,
     validateUpsert: true,
     plural: 'Raeume',
     idInjection: true,
     validations: [],
     relations: {},
     acls: [ [Object], [Object], [Object], [Object] ],
     methods: {} },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'Raum',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Raeume', verb: 'all' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'Raum.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  shared: true,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Circular],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Circular],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-04 00:00:22.355] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'Schulung',
     rawProperties: 
      { name: [Object],
        version: [Object],
        beschreibung: [Object],
        start: [Object],
        ende: [Object],
        status: [Object],
        id: [Object] },
     settings: 
      { strict: false,
        base: 'PersistedModel',
        replaceOnPUT: false,
        validateUpsert: true,
        plural: 'Schulungen',
        idInjection: true,
        validations: [],
        relations: {},
        acls: [Object],
        methods: {} },
     relations: [],
     properties: 
      { name: [Object],
        version: [Object],
        beschreibung: [Object],
        start: [Object],
        ende: [Object],
        status: [Object],
        id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 'PersistedModel',
     replaceOnPUT: false,
     validateUpsert: true,
     plural: 'Schulungen',
     idInjection: true,
     validations: [],
     relations: {},
     acls: [ [Object], [Object], [Object], [Object] ],
     methods: {} },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'Schulung',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Schulungen', verb: 'all' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'Schulung.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  shared: true,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Circular],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Circular],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-04 00:00:22.388] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'PersistedModel',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: [Object], replaceOnPUT: false },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'PersistedModel',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     patchOrCreate: { [Function: upsert] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     patchOrCreateWithWhere: { [Function: upsertWithWhere] _delegate: true },
     upsertWithWhere: { [Function: upsertWithWhere] _delegate: true },
     replaceOrCreate: { [Function: replaceOrCreate] _delegate: true },
     findOrCreate: { [Function: findOrCreate] _delegate: true },
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function: updateAll] _delegate: true },
     update: { [Function: updateAll] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     replaceById: { [Function: replaceById] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     autoAttach: 'db' },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: {},
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'Kursinhalt',
     rawProperties: 
      { name: [Object],
        beschreibung: [Object],
        unterlagen: [Object],
        termin: [Object],
        status: [Object],
        id: [Object] },
     settings: 
      { strict: false,
        base: 'PersistedModel',
        replaceOnPUT: false,
        validateUpsert: true,
        plural: 'Kursinhalte',
        idInjection: true,
        validations: [],
        relations: {},
        acls: [Object],
        methods: {} },
     relations: [],
     properties: 
      { name: [Object],
        beschreibung: [Object],
        unterlagen: [Object],
        termin: [Object],
        status: [Object],
        id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 'PersistedModel',
     replaceOnPUT: false,
     validateUpsert: true,
     plural: 'Kursinhalte',
     idInjection: true,
     validations: [],
     relations: {},
     acls: [ [Object], [Object], [Object], [Object] ],
     methods: {} },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function: setupPersistedModel],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'Kursinhalt',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Kursinhalte', verb: 'all' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'Kursinhalt.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  shared: true,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Circular],
        Dozent: [Object],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Circular],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-04 00:00:22.420] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        patchOrCreateWithWhere: [Object],
        upsertWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        replaceById: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db' },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: { email: [Function], password: [Function] },
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'User',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: 
      { strict: false,
        base: [Object],
        replaceOnPUT: false,
        caseSensitiveEmail: true,
        hidden: [Object],
        acls: [Object],
        relations: [Object],
        maxTTL: 31556926,
        ttl: 1209600 },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'User',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: [Function],
     patchOrCreate: [Function],
     updateOrCreate: [Function],
     upsert: [Function],
     patchOrCreateWithWhere: [Function],
     upsertWithWhere: [Function],
     replaceOrCreate: [Function: replaceOrCreate],
     findOrCreate: [Function: findOrCreate],
     exists: [Function: exists],
     findById: [Function: findById],
     find: [Function: find],
     findOne: [Function: findOne],
     destroyAll: [Function: destroyAll],
     remove: [Function: destroyAll],
     deleteAll: [Function: destroyAll],
     updateAll: [Function],
     update: [Function],
     destroyById: [Function: deleteById],
     removeById: [Function: deleteById],
     deleteById: [Function: deleteById],
     count: [Function],
     replaceById: [Function],
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     normalizeCredentials: [Function],
     login: [Function],
     logout: [Function],
     generateVerificationToken: [Function],
     confirm: [Function],
     resetPassword: [Function],
     hashPassword: [Function],
     validatePassword: [Function],
     email: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        send: [Function],
        autoAttach: 'mail' },
     accessToken: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Function],
        patchOrCreate: [Function],
        updateOrCreate: [Function],
        upsert: [Function],
        patchOrCreateWithWhere: [Function],
        upsertWithWhere: [Function],
        replaceOrCreate: [Function: replaceOrCreate],
        findOrCreate: [Function: findOrCreate],
        exists: [Function: exists],
        findById: [Function: findById],
        find: [Function: find],
        findOne: [Function: findOne],
        destroyAll: [Function: destroyAll],
        remove: [Function: destroyAll],
        deleteAll: [Function: destroyAll],
        updateAll: [Function],
        update: [Function],
        destroyById: [Function: deleteById],
        removeById: [Function: deleteById],
        deleteById: [Function: deleteById],
        count: [Function],
        replaceById: [Function],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        ANONYMOUS: [Object],
        createAccessTokenId: [Function],
        findForRequest: [Function],
        autoAttach: 'db',
        _mixins: [Object],
        _forDB: [Function],
        defaultScope: [Function],
        applyScope: [Function],
        applyProperties: [Function],
        lookupModel: [Function],
        getConnector: [Function],
        findByIds: [Function],
        all: [Function],
        _getSetting: [Function],
        _normalize: [Function],
        _coerce: [Function],
        scope: [Function],
        normalizeInclude: [Function: normalizeInclude],
        include: [Function],
        hasMany: [Function: hasMany],
        belongsTo: [Function],
        hasAndBelongsToMany: [Function: hasAndBelongsToMany],
        hasOne: [Function: hasOne],
        referencesMany: [Function: referencesMany],
        embedsOne: [Function: embedsOne],
        embedsMany: [Function: embedsMany],
        beginTransaction: [Function],
        Transaction: [Object],
        _scopeMeta: {},
        shared: false,
        app: [Object] },
     autoAttach: 'db',
     _mixins: [ [Object], [Object], [Object], [Object] ],
     _forDB: [Function],
     defaultScope: [Function],
     applyScope: [Function],
     applyProperties: [Function],
     lookupModel: [Function],
     getConnector: [Function],
     findByIds: [Function],
     all: [Function],
     _getSetting: [Function],
     _normalize: [Function],
     _coerce: [Function],
     scope: [Function],
     normalizeInclude: [Function: normalizeInclude],
     include: [Function],
     hasMany: [Function: hasMany],
     belongsTo: [Function],
     hasAndBelongsToMany: [Function: hasAndBelongsToMany],
     hasOne: [Function: hasOne],
     referencesMany: [Function: referencesMany],
     embedsOne: [Function: embedsOne],
     embedsMany: [Function: embedsMany],
     beginTransaction: [Function],
     Transaction: 
      { [Function: Transaction]
        super_: [Object],
        SERIALIZABLE: 'SERIALIZABLE',
        REPEATABLE_READ: 'REPEATABLE READ',
        READ_COMMITTED: 'READ COMMITTED',
        READ_UNCOMMITTED: 'READ UNCOMMITTED',
        hookTypes: [Object],
        begin: [Function] },
     shared: true,
     app: 
      { [Function: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 3,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        enableAuth: [Function],
        dataSources: [Object],
        datasources: [Object],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Object],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Object],
        _skipLayerSorting: false,
        isAuthEnabled: true },
     scopes: { accessTokens: [Object] } },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: { email: [Function], password: [Function] },
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'Dozent',
     rawProperties: 
      { von: [Object],
        bis: [Object],
        realm: [Object],
        username: [Object],
        password: [Object],
        credentials: [Object],
        challenges: [Object],
        email: [Object],
        emailVerified: [Object],
        verificationToken: [Object],
        status: [Object],
        created: [Object],
        lastUpdated: [Object],
        id: [Object] },
     settings: 
      { strict: false,
        base: 'User',
        replaceOnPUT: false,
        caseSensitiveEmail: true,
        hidden: [Object],
        acls: [Object],
        relations: [Object],
        maxTTL: 31556926,
        ttl: 1209600,
        validateUpsert: true,
        plural: 'Dozenten',
        idInjection: true,
        validations: [],
        methods: {} },
     relations: [],
     properties: 
      { von: [Object],
        bis: [Object],
        realm: [Object],
        username: [Object],
        password: [Object],
        credentials: [Object],
        challenges: [Object],
        email: [Object],
        emailVerified: [Object],
        verificationToken: [Object],
        status: [Object],
        created: [Object],
        lastUpdated: [Object],
        id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 'User',
     replaceOnPUT: false,
     caseSensitiveEmail: true,
     hidden: [ 'password', 'verificationToken' ],
     acls: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     relations: { accessTokens: [Object] },
     maxTTL: 31556926,
     ttl: 1209600,
     validateUpsert: true,
     plural: 'Dozenten',
     idInjection: true,
     validations: [],
     methods: {} },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'Dozent',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Dozenten', verb: 'all' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'Dozent.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  normalizeCredentials: [Function],
  login: [Function],
  logout: [Function],
  generateVerificationToken: [Function],
  confirm: [Function],
  resetPassword: [Function],
  hashPassword: [Function],
  validatePassword: [Function],
  email: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'Email',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: 'Model' },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'Email',
        ctor: [Circular],
        _methods: [],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     send: [Function],
     autoAttach: 'mail' },
  accessToken: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        patchOrCreateWithWhere: [Object],
        upsertWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        replaceById: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db' },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'AccessToken',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: null,
        json: null },
     settings: 
      { strict: false,
        base: [Object],
        replaceOnPUT: false,
        relations: [Object],
        acls: [Object] },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'AccessToken',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: [Function],
     patchOrCreate: [Function],
     updateOrCreate: [Function],
     upsert: [Function],
     patchOrCreateWithWhere: [Function],
     upsertWithWhere: [Function],
     replaceOrCreate: [Function: replaceOrCreate],
     findOrCreate: [Function: findOrCreate],
     exists: [Function: exists],
     findById: [Function: findById],
     find: [Function: find],
     findOne: [Function: findOne],
     destroyAll: [Function: destroyAll],
     remove: [Function: destroyAll],
     deleteAll: [Function: destroyAll],
     updateAll: [Function],
     update: [Function],
     destroyById: [Function: deleteById],
     removeById: [Function: deleteById],
     deleteById: [Function: deleteById],
     count: [Function],
     replaceById: [Function],
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     ANONYMOUS: 
      { id: '$anonymous',
        created: 2016-12-03T22:59:23.764Z,
        ttl: 1209600 },
     createAccessTokenId: [Function],
     findForRequest: [Function],
     autoAttach: 'db',
     _mixins: [ [Object], [Object], [Object], [Object] ],
     _forDB: [Function],
     defaultScope: [Function],
     applyScope: [Function],
     applyProperties: [Function],
     lookupModel: [Function],
     getConnector: [Function],
     findByIds: [Function],
     all: [Function],
     _getSetting: [Function],
     _normalize: [Function],
     _coerce: [Function],
     scope: [Function],
     normalizeInclude: [Function: normalizeInclude],
     include: [Function],
     hasMany: [Function: hasMany],
     belongsTo: [Function],
     hasAndBelongsToMany: [Function: hasAndBelongsToMany],
     hasOne: [Function: hasOne],
     referencesMany: [Function: referencesMany],
     embedsOne: [Function: embedsOne],
     embedsMany: [Function: embedsMany],
     beginTransaction: [Function],
     Transaction: 
      { [Function: Transaction]
        super_: [Object],
        SERIALIZABLE: 'SERIALIZABLE',
        REPEATABLE_READ: 'REPEATABLE READ',
        READ_COMMITTED: 'READ COMMITTED',
        READ_UNCOMMITTED: 'READ UNCOMMITTED',
        hookTypes: [Object],
        begin: [Function] },
     _scopeMeta: {},
     shared: false,
     app: 
      { [Function: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 3,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        enableAuth: [Function],
        dataSources: [Object],
        datasources: [Object],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Object],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Object],
        _skipLayerSorting: false,
        isAuthEnabled: true } },
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  scopes: 
   { accessTokens: 
      ScopeDefinition {
        isStatic: false,
        modelFrom: [Object],
        modelTo: [Object],
        name: 'accessTokens',
        params: [Function],
        methods: [Object],
        options: [Object] } },
  shared: true,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Circular],
        Teilnehmer: [Object],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Circular],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
[2016-12-04 00:00:22.488] [INFO] console - { [Function: ModelConstructor]
  setMaxListeners: [Function: bound setMaxListeners],
  getMaxListeners: [Function: bound getMaxListeners],
  emit: [Function: bound emit],
  addListener: [Function: bound addListener],
  on: [Function],
  prependListener: [Function: bound prependListener],
  once: [Function: bound once],
  prependOnceListener: [Function: bound prependOnceListener],
  removeListener: [Function: bound removeListener],
  removeAllListeners: [Function: bound removeAllListeners],
  listeners: [Function: bound listeners],
  listenerCount: [Function: bound listenerCount],
  eventNames: [Function: bound eventNames],
  super_: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        patchOrCreateWithWhere: [Object],
        upsertWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        replaceById: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db' },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: { email: [Function], password: [Function] },
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'User',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: 
      { strict: false,
        base: [Object],
        replaceOnPUT: false,
        caseSensitiveEmail: true,
        hidden: [Object],
        acls: [Object],
        relations: [Object],
        maxTTL: 31556926,
        ttl: 1209600 },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'User',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: [Function],
     patchOrCreate: [Function],
     updateOrCreate: [Function],
     upsert: [Function],
     patchOrCreateWithWhere: [Function],
     upsertWithWhere: [Function],
     replaceOrCreate: [Function: replaceOrCreate],
     findOrCreate: [Function: findOrCreate],
     exists: [Function: exists],
     findById: [Function: findById],
     find: [Function: find],
     findOne: [Function: findOne],
     destroyAll: [Function: destroyAll],
     remove: [Function: destroyAll],
     deleteAll: [Function: destroyAll],
     updateAll: [Function],
     update: [Function],
     destroyById: [Function: deleteById],
     removeById: [Function: deleteById],
     deleteById: [Function: deleteById],
     count: [Function],
     replaceById: [Function],
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     normalizeCredentials: [Function],
     login: [Function],
     logout: [Function],
     generateVerificationToken: [Function],
     confirm: [Function],
     resetPassword: [Function],
     hashPassword: [Function],
     validatePassword: [Function],
     email: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        send: [Function],
        autoAttach: 'mail' },
     accessToken: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Function],
        patchOrCreate: [Function],
        updateOrCreate: [Function],
        upsert: [Function],
        patchOrCreateWithWhere: [Function],
        upsertWithWhere: [Function],
        replaceOrCreate: [Function: replaceOrCreate],
        findOrCreate: [Function: findOrCreate],
        exists: [Function: exists],
        findById: [Function: findById],
        find: [Function: find],
        findOne: [Function: findOne],
        destroyAll: [Function: destroyAll],
        remove: [Function: destroyAll],
        deleteAll: [Function: destroyAll],
        updateAll: [Function],
        update: [Function],
        destroyById: [Function: deleteById],
        removeById: [Function: deleteById],
        deleteById: [Function: deleteById],
        count: [Function],
        replaceById: [Function],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        ANONYMOUS: [Object],
        createAccessTokenId: [Function],
        findForRequest: [Function],
        autoAttach: 'db',
        _mixins: [Object],
        _forDB: [Function],
        defaultScope: [Function],
        applyScope: [Function],
        applyProperties: [Function],
        lookupModel: [Function],
        getConnector: [Function],
        findByIds: [Function],
        all: [Function],
        _getSetting: [Function],
        _normalize: [Function],
        _coerce: [Function],
        scope: [Function],
        normalizeInclude: [Function: normalizeInclude],
        include: [Function],
        hasMany: [Function: hasMany],
        belongsTo: [Function],
        hasAndBelongsToMany: [Function: hasAndBelongsToMany],
        hasOne: [Function: hasOne],
        referencesMany: [Function: referencesMany],
        embedsOne: [Function: embedsOne],
        embedsMany: [Function: embedsMany],
        beginTransaction: [Function],
        Transaction: [Object],
        _scopeMeta: {},
        shared: false,
        app: [Object] },
     autoAttach: 'db',
     _mixins: [ [Object], [Object], [Object], [Object] ],
     _forDB: [Function],
     defaultScope: [Function],
     applyScope: [Function],
     applyProperties: [Function],
     lookupModel: [Function],
     getConnector: [Function],
     findByIds: [Function],
     all: [Function],
     _getSetting: [Function],
     _normalize: [Function],
     _coerce: [Function],
     scope: [Function],
     normalizeInclude: [Function: normalizeInclude],
     include: [Function],
     hasMany: [Function: hasMany],
     belongsTo: [Function],
     hasAndBelongsToMany: [Function: hasAndBelongsToMany],
     hasOne: [Function: hasOne],
     referencesMany: [Function: referencesMany],
     embedsOne: [Function: embedsOne],
     embedsMany: [Function: embedsMany],
     beginTransaction: [Function],
     Transaction: 
      { [Function: Transaction]
        super_: [Object],
        SERIALIZABLE: 'SERIALIZABLE',
        REPEATABLE_READ: 'REPEATABLE READ',
        READ_COMMITTED: 'READ COMMITTED',
        READ_UNCOMMITTED: 'READ UNCOMMITTED',
        hookTypes: [Object],
        begin: [Function] },
     shared: true,
     app: 
      { [Function: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 3,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        enableAuth: [Function],
        dataSources: [Object],
        datasources: [Object],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Object],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Object],
        _skipLayerSorting: false,
        isAuthEnabled: true },
     scopes: { accessTokens: [Object] } },
  defineProperty: [Function],
  getPropertyType: [Function],
  isProtectedProperty: [Function],
  isHiddenProperty: [Function],
  mixin: [Function],
  getDataSource: [Function],
  observe: [Function],
  removeObserver: [Function],
  clearObservers: [Function],
  notifyObserversOf: [Function],
  _notifyBaseObservers: [Function],
  notifyObserversAround: [Function],
  afterInitialize: null,
  beforeValidate: null,
  afterValidate: null,
  beforeSave: null,
  afterSave: null,
  beforeCreate: null,
  afterCreate: null,
  beforeUpdate: null,
  afterUpdate: null,
  beforeDestroy: null,
  afterDestroy: null,
  validatesPresenceOf: [Function],
  validatesAbsenceOf: [Function],
  validatesLengthOf: [Function],
  validatesNumericalityOf: [Function],
  validatesInclusionOf: [Function],
  validatesExclusionOf: [Function],
  validatesFormatOf: [Function],
  validate: [Function],
  validateAsync: [Function],
  validatesUniquenessOf: [Function],
  getter: {},
  setter: { email: [Function], password: [Function] },
  definition: 
   ModelDefinition {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     name: 'Teilnehmer',
     rawProperties: 
      { von: [Object],
        bis: [Object],
        realm: [Object],
        username: [Object],
        password: [Object],
        credentials: [Object],
        challenges: [Object],
        email: [Object],
        emailVerified: [Object],
        verificationToken: [Object],
        status: [Object],
        created: [Object],
        lastUpdated: [Object],
        id: [Object] },
     settings: 
      { strict: false,
        base: 'User',
        replaceOnPUT: false,
        caseSensitiveEmail: true,
        hidden: [Object],
        acls: [Object],
        relations: [Object],
        maxTTL: 31556926,
        ttl: 1209600,
        validateUpsert: true,
        plural: 'Teilnehmer',
        idInjection: true,
        validations: [],
        methods: {} },
     relations: [],
     properties: 
      { von: [Object],
        bis: [Object],
        realm: [Object],
        username: [Object],
        password: [Object],
        credentials: [Object],
        challenges: [Object],
        email: [Object],
        emailVerified: [Object],
        verificationToken: [Object],
        status: [Object],
        created: [Object],
        lastUpdated: [Object],
        id: [Object] },
     _ids: [ [Object] ] },
  settings: 
   { strict: false,
     base: 'User',
     replaceOnPUT: false,
     caseSensitiveEmail: true,
     hidden: [ 'password', 'verificationToken' ],
     acls: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     relations: { accessTokens: [Object] },
     maxTTL: 31556926,
     ttl: 1209600,
     validateUpsert: true,
     plural: 'Teilnehmer',
     idInjection: true,
     validations: [],
     methods: {} },
  forEachProperty: [Function],
  attachTo: [Function],
  extend: [Function],
  registerProperty: [Function],
  registry: 
   Registry {
     defaultDataSources: {},
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 } },
  setup: [Function],
  _ACL: [Function: getACL],
  checkAccess: [Function],
  _getAccessTypeForMethod: [Function],
  getApp: [Function],
  remoteMethod: [Function],
  disableRemoteMethod: [Function],
  disableRemoteMethodByName: [Function],
  belongsToRemoting: [Function],
  hasOneRemoting: [Function],
  hasManyRemoting: [Function],
  scopeRemoting: [Function],
  nestRemoting: [Function],
  ValidationError: 
   { [Function: ValidationError]
     super_: { [Function: Error] stackTraceLimit: 16, prepareStackTrace: undefined },
     maxPropertyStringLength: 32 },
  sharedClass: 
   SharedClass {
     name: 'Teilnehmer',
     ctor: [Circular],
     _methods: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     _resolvers: [ [Function: resolver] ],
     _disabledMethods: {},
     http: { path: '/Teilnehmer', verb: 'all' },
     sharedCtor: 
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Circular],
        ctor: [Circular],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'Teilnehmer.prototype.sharedCtor' } },
  sharedCtor: 
   { [Function]
     accepts: [ [Object] ],
     http: [ [Object] ],
     returns: { root: true } },
  beforeRemote: [Function],
  afterRemote: [Function],
  afterRemoteError: [Function],
  _runWhenAttachedToApp: [Function],
  create: [Function],
  patchOrCreate: [Function],
  updateOrCreate: [Function],
  upsert: [Function],
  patchOrCreateWithWhere: [Function],
  upsertWithWhere: [Function],
  replaceOrCreate: [Function: replaceOrCreate],
  findOrCreate: [Function: findOrCreate],
  exists: [Function: exists],
  findById: [Function: findById],
  find: [Function: find],
  findOne: [Function: findOne],
  destroyAll: [Function: destroyAll],
  remove: [Function: destroyAll],
  deleteAll: [Function: destroyAll],
  updateAll: [Function],
  update: [Function],
  destroyById: [Function: deleteById],
  removeById: [Function: deleteById],
  deleteById: [Function: deleteById],
  count: [Function],
  replaceById: [Function],
  getIdName: [Function],
  setupRemoting: [Function],
  diff: [Function],
  changes: [Function],
  checkpoint: [Function],
  currentCheckpoint: [Function],
  replicate: [Function],
  createUpdates: [Function],
  bulkUpdate: [Function],
  getChangeModel: [Function],
  getSourceId: [Function],
  enableChangeTracking: [Function],
  _defineChangeModel: [Function],
  rectifyAllChanges: [Function],
  handleChangeError: [Function],
  rectifyChange: [Function],
  findLastChange: [Function],
  updateLastChange: [Function],
  createChangeStream: { [Function] _delegate: true },
  normalizeCredentials: [Function],
  login: [Function],
  logout: [Function],
  generateVerificationToken: [Function],
  confirm: [Function],
  resetPassword: [Function],
  hashPassword: [Function],
  validatePassword: [Function],
  email: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'Email',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: { strict: false, base: 'Model' },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'Email',
        ctor: [Circular],
        _methods: [],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     send: [Function],
     autoAttach: 'mail' },
  accessToken: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function: bound setMaxListeners],
     getMaxListeners: [Function: bound getMaxListeners],
     emit: [Function: bound emit],
     addListener: [Function: bound addListener],
     on: [Function],
     prependListener: [Function: bound prependListener],
     once: [Function: bound once],
     prependOnceListener: [Function: bound prependOnceListener],
     removeListener: [Function: bound removeListener],
     removeAllListeners: [Function: bound removeAllListeners],
     listeners: [Function: bound listeners],
     listenerCount: [Function: bound listenerCount],
     eventNames: [Function: bound eventNames],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        disableRemoteMethodByName: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        patchOrCreateWithWhere: [Object],
        upsertWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        replaceById: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db' },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     notifyObserversAround: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      ModelDefinition {
        modelBuilder: [Object],
        name: 'AccessToken',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: null,
        json: null },
     settings: 
      { strict: false,
        base: [Object],
        replaceOnPUT: false,
        relations: [Object],
        acls: [Object] },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     disableRemoteMethodByName: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      SharedClass {
        name: 'AccessToken',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: [Function],
     patchOrCreate: [Function],
     updateOrCreate: [Function],
     upsert: [Function],
     patchOrCreateWithWhere: [Function],
     upsertWithWhere: [Function],
     replaceOrCreate: [Function: replaceOrCreate],
     findOrCreate: [Function: findOrCreate],
     exists: [Function: exists],
     findById: [Function: findById],
     find: [Function: find],
     findOne: [Function: findOne],
     destroyAll: [Function: destroyAll],
     remove: [Function: destroyAll],
     deleteAll: [Function: destroyAll],
     updateAll: [Function],
     update: [Function],
     destroyById: [Function: deleteById],
     removeById: [Function: deleteById],
     deleteById: [Function: deleteById],
     count: [Function],
     replaceById: [Function],
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     createChangeStream: { [Function] _delegate: true },
     ANONYMOUS: 
      { id: '$anonymous',
        created: 2016-12-03T22:59:23.764Z,
        ttl: 1209600 },
     createAccessTokenId: [Function],
     findForRequest: [Function],
     autoAttach: 'db',
     _mixins: [ [Object], [Object], [Object], [Object] ],
     _forDB: [Function],
     defaultScope: [Function],
     applyScope: [Function],
     applyProperties: [Function],
     lookupModel: [Function],
     getConnector: [Function],
     findByIds: [Function],
     all: [Function],
     _getSetting: [Function],
     _normalize: [Function],
     _coerce: [Function],
     scope: [Function],
     normalizeInclude: [Function: normalizeInclude],
     include: [Function],
     hasMany: [Function: hasMany],
     belongsTo: [Function],
     hasAndBelongsToMany: [Function: hasAndBelongsToMany],
     hasOne: [Function: hasOne],
     referencesMany: [Function: referencesMany],
     embedsOne: [Function: embedsOne],
     embedsMany: [Function: embedsMany],
     beginTransaction: [Function],
     Transaction: 
      { [Function: Transaction]
        super_: [Object],
        SERIALIZABLE: 'SERIALIZABLE',
        REPEATABLE_READ: 'REPEATABLE READ',
        READ_COMMITTED: 'READ COMMITTED',
        READ_UNCOMMITTED: 'READ UNCOMMITTED',
        hookTypes: [Object],
        begin: [Function] },
     _scopeMeta: {},
     shared: false,
     app: 
      { [Function: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 3,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        enableAuth: [Function],
        dataSources: [Object],
        datasources: [Object],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Object],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Object],
        _skipLayerSorting: false,
        isAuthEnabled: true } },
  autoAttach: 'db',
  _mixins: 
   [ { [Function]
       _forDB: [Function],
       defaultScope: [Function],
       applyScope: [Function],
       applyProperties: [Function],
       lookupModel: [Function],
       getConnector: [Function],
       create: [Function],
       upsert: [Function],
       patchOrCreate: [Function],
       updateOrCreate: [Function],
       upsertWithWhere: [Function],
       patchOrCreateWithWhere: [Function],
       replaceOrCreate: [Function: replaceOrCreate],
       findOrCreate: [Function: findOrCreate],
       exists: [Function: exists],
       findById: [Function: findById],
       findByIds: [Function],
       all: [Function],
       _getSetting: [Function],
       _normalize: [Function],
       _coerce: [Function],
       find: [Function: find],
       findOne: [Function: findOne],
       destroyAll: [Function: destroyAll],
       deleteAll: [Function: destroyAll],
       remove: [Function: destroyAll],
       deleteById: [Function: deleteById],
       destroyById: [Function: deleteById],
       removeById: [Function: deleteById],
       count: [Function],
       updateAll: [Function],
       update: [Function],
       replaceById: [Function],
       scope: [Function],
       _mixins: [Object],
       normalizeInclude: [Function: normalizeInclude],
       include: [Function],
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany],
       beginTransaction: [Function],
       Transaction: [Object] },
     { [Function: Inclusion]
       normalizeInclude: [Function: normalizeInclude],
       include: [Function] },
     { [Function: RelationMixin]
       hasMany: [Function: hasMany],
       belongsTo: [Function],
       hasAndBelongsToMany: [Function: hasAndBelongsToMany],
       hasOne: [Function: hasOne],
       referencesMany: [Function: referencesMany],
       embedsOne: [Function: embedsOne],
       embedsMany: [Function: embedsMany] },
     { [Function: TransactionMixin] beginTransaction: [Function], Transaction: [Object] } ],
  _forDB: [Function],
  defaultScope: [Function],
  applyScope: [Function],
  applyProperties: [Function],
  lookupModel: [Function],
  getConnector: [Function],
  findByIds: [Function],
  all: [Function],
  _getSetting: [Function],
  _normalize: [Function],
  _coerce: [Function],
  scope: [Function],
  normalizeInclude: [Function: normalizeInclude],
  include: [Function],
  hasMany: [Function: hasMany],
  belongsTo: [Function],
  hasAndBelongsToMany: [Function: hasAndBelongsToMany],
  hasOne: [Function: hasOne],
  referencesMany: [Function: referencesMany],
  embedsOne: [Function: embedsOne],
  embedsMany: [Function: embedsMany],
  beginTransaction: [Function],
  Transaction: 
   { [Function: Transaction]
     super_: 
      { [Function: EventEmitter]
        EventEmitter: [Circular],
        usingDomains: true,
        defaultMaxListeners: [Getter/Setter],
        init: [Function],
        listenerCount: [Function] },
     SERIALIZABLE: 'SERIALIZABLE',
     REPEATABLE_READ: 'REPEATABLE READ',
     READ_COMMITTED: 'READ COMMITTED',
     READ_UNCOMMITTED: 'READ UNCOMMITTED',
     hookTypes: 
      { BEFORE_COMMIT: 'before commit',
        AFTER_COMMIT: 'after commit',
        BEFORE_ROLLBACK: 'before rollback',
        AFTER_ROLLBACK: 'after rollback',
        TIMEOUT: 'timeout' },
     begin: [Function] },
  scopes: 
   { accessTokens: 
      ScopeDefinition {
        isStatic: false,
        modelFrom: [Object],
        modelTo: [Object],
        name: 'accessTokens',
        params: [Function],
        methods: [Object],
        options: [Object] } },
  shared: true,
  app: 
   { [Function: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        modelRemoted: [Function],
        remoteMethodDisabled: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function],
     handle: [Function: handle],
     use: [Function: use],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jan/nodejs/pinkus/views',
        'jsonp callback name': 'callback',
        host: '0.0.0.0',
        port: 3000,
        restApiRoot: '/api',
        remoting: [Object],
        legacyExplorer: false,
        'loopback-component-explorer': [Object],
        url: 'http://0.0.0.0:3000/' },
     _eventsCount: 3,
     locals: { settings: [Object] },
     mountpath: '/',
     __expressLazyRouter: [Function: lazyrouter],
     _sortLayersByPhase: [Function],
     _findLayerByHandler: [Function],
     middleware: [Function],
     defineMiddlewarePhases: [Function],
     middlewareFromConfig: [Function],
     boot: [Function],
     enableAuth: [Function],
     dataSources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     datasources: 
      { db: [Object],
        Db: [Object],
        pinkusDB: [Object],
        PinkusDB: [Object] },
     handler: [Function],
     remoteObjects: [Function],
     connector: [Function],
     dataSource: [Function],
     models: 
      { [Function]
        User: [Object],
        AccessToken: [Object],
        ACL: [Object],
        RoleMapping: [Object],
        Role: [Object],
        Kunde: [Object],
        Standort: [Object],
        Raum: [Object],
        Schulung: [Object],
        Kursinhalt: [Object],
        Dozent: [Object],
        Teilnehmer: [Circular],
        Teilnehmergruppe: [Object],
        Kurs: [Object],
        Kurstermin: [Object] },
     model: [Function],
     disuse: [Function],
     remotes: [Function],
     loopback: 
      { [Function: createApplication]
        version: '2.36.0',
        mime: undefined,
        registry: [Object],
        isBrowser: false,
        isServer: true,
        application: [Object],
        request: [Object],
        response: [Object],
        Route: [Function: Route],
        Router: [Object],
        query: [Function: query],
        static: [Object],
        bodyParser: [Function],
        json: [Function],
        urlencoded: [Function],
        compress: [Getter/Setter],
        timeout: [Getter/Setter],
        cookieParser: [Getter/Setter],
        cookieSession: [Getter/Setter],
        csrf: [Getter/Setter],
        session: [Getter/Setter],
        methodOverride: [Getter/Setter],
        logger: [Getter/Setter],
        responseTime: [Getter/Setter],
        directory: [Getter/Setter],
        vhost: [Getter/Setter],
        context: [Function],
        favicon: [Function],
        rest: [Function: rest],
        status: [Function: status],
        token: [Function: token],
        urlNotFound: [Function: urlNotFound],
        errorHandler: [Function: errorHandler],
        faviconFile: '/Users/jan/nodejs/pinkus/node_modules/loopback/favicon.ico',
        remoteMethod: [Function],
        template: [Function],
        getCurrentContext: [Function],
        runInContext: [Function],
        createContext: [Function],
        createModel: [Function],
        configureModel: [Function],
        findModel: [Function],
        getModel: [Function],
        getModelByType: [Function],
        createDataSource: [Function],
        memory: [Function],
        setDefaultDataSourceForType: [Function],
        getDefaultDataSourceForType: [Function],
        autoAttach: [Function],
        autoAttachModel: [Function],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        DataSource: [Object],
        Connector: [Object],
        Memory: [Object],
        Mail: [Object],
        Remote: [Object],
        GeoPoint: [Object],
        ValidationError: [Object] },
     connectors: 
      { memory: [Object],
        Memory: [Object],
        remote: [Object],
        Remote: [Object] },
     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },
     start: [Function],
     booting: false,
     _models: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Circular],
        [Object],
        [Object],
        [Object] ],
     _remotes: 
      RemoteObjects {
        _events: [Object],
        newListener: false,
        _conf: [Object],
        wildcard: true,
        listenerTree: [Object],
        options: [Object],
        exports: {},
        _classes: [Object],
        phases: [Object],
        authorization: [Function] },
     _handlers: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object],
        __expressUse: [Function: use],
        use: [Function: useAndSort],
        __expressRoute: [Function: route],
        route: [Function: routeAndSort] },
     _requestHandlingPhases: [ 'initial', 'session', 'auth', 'parse', 'routes', 'files', 'final' ],
     _skipLayerSorting: false,
     isAuthEnabled: true } }
